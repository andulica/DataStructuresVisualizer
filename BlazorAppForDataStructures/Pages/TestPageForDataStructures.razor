@page "/test-page"
@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;

<div id="linked-list">

    <!-- Operation list selection -->
    <h5>Select Operation</h5>
    <select @bind="operation">
        @foreach (var operation in operations)
        {
            <option value="@operation">@operation</option>
        }
    </select>

    <!-- Linked List Display -->
    <h5>Linked List</h5>
    @foreach (var node in linkedList)
    {
        <div class="node">@node._data</div>
        @if (node.Next != null)
        {
            <div class="arrow">→</div>
        }
    }
    <div class="node null-node">null</div>

    <Button class="btn btn-primary" @onclick="(() => buttonVisualize(operation))">Visualize</Button>
    <input @bind="inputData" type="text" placeholder="Enter node data" />

    <div>@resultMessage</div>
</div>


<style>
    #linked-list {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .node {
        padding: 10px;
        border: 2px solid black;
        border-radius: 5px;
        text-align: center;
    }

    .null-node {
        background-color: lightgray;
    }

    .arrow {
        font-size: 20px;
    }
</style>


@code {
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    private int inputData;
    private string[] operations = { "Insert", "Delete", "Search", "Create" };
    private string operation;
    private string resultMessage;
    Random rand = new Random();


    protected override void OnInitialized()
    {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1,30));
        linkedList.Append(rand.Next(1,30));
        linkedList.Append(rand.Next(1,30));
    }

    void buttonVisualize(string operation)
    {
        switch (operation)
        {
            case "Insert":
                linkedList.Append(inputData);
                break;

            case "Delete":
                linkedList.Delete(inputData);
                break;

            case "Search":
                var position = linkedList.FindIndexOf(inputData);
                if (position != -1) 
                {
                    resultMessage = $"The node with value {inputData} was found at position {position}.";
                }
                else
                {
                    resultMessage = "The node was not found.";
                }
                break;

            case "Create":
                this.OnInitialized();

                break;
        }
    }
}
