@page "/grid-page"
@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@using DataStructuresVisualizer.DataStructures.DoublyLinkedListFile;
@using DataStructuresVisualizer.DataStructures.BinarySearchTree;
@using DataStructuresVisualizer.DataStructures.HashMap;
@using DataStructuresVisualizer.DataStructures.HashSet;
@using DataStructuresVisualizer.DataStructures.Stack;
@using DataStructuresVisualizer.DataStructures.Queue;
@using DataStructuresVisualizer.DataStructures.Array;


<div id="linked-list">
    <!-- Data Structure Selection -->
    <h3>Select a Data Structure</h3>
    <select @bind="operation">
        @foreach (var operation in operations)
        {
            <option value="@operation">@operation</option>
        }
    </select>
    <p>You have selected: @operation</p>

    <!-- Linked List Display -->
    <h3>Linked List</h3>
    @foreach (var node in linkedList)
    {
        <div class="node">@node._data</div>
        @if (node.Next != null)
        {
            <div class="arrow">→</div>
        }
    }
    <div class="node null-node">null</div>

    <!-- Node Actions -->
    <h3>Node Actions</h3>
    <div class="node-actions">
        <Button class="btn btn-primary" @onclick="(() => buttonVisualize(operation))">Visualize</Button>
        
        <input @bind="inputData" type="text" placeholder="Enter node data" />
    </div>
</div>


<style>
    #linked-list {
        display: flex;
        align-items: center;
        gap: 10px; 
    }

    .node {
        padding: 10px;
        border: 2px solid black;
        border-radius: 5px; 
        text-align: center;
    }

    .null-node {
        background-color: lightgray;
    }

    .arrow {
        font-size: 20px;
    }
</style>


@code {
    private SinglyLinkedList<int> linkedList; 
    private int  inputData;
    private string [] operations = {"Insert", "Delete", "Search", "Create"};
    private string operation;

    void buttonVisualize(string operation)
    {
        switch(operation)
        {
            case "Insert":
                linkedList.Append(inputData);
                break;

        }
    }
}
