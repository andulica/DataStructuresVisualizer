@using DataStructuresVisualizer.DataStructures.Queue;
@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@inject IJSRuntime JSRuntime

<h3>Queue</h3>

<div class="operation-selection">
    <select @bind="selectedAction">
        <option value="Peek">Peek</option>
        <option value="Enqueue">Enqueue</option>
        <option value="Dequeue">Dequeue</option>
        <option value="Create">Create</option>
    </select>
    @switch (selectedAction)
    {
        case "Peek":
            <div class="insertion-fields">
                <label for="inputValue">Input Value</label>
                <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                <button class="custom-button" @onclick="PeekFront" disabled="@isOperationInProgress">Peek Front</button>
                <button class="custom-button" @onclick="PeekBack" disabled="@isOperationInProgress">Peek Back</button>

            </div>
            break;
        case "Enqueue":
            <div class="insertion-fields">
                <label for="inputValue">Input Value</label>
                <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                <button class="custom-button" @onclick="Enqueue" disabled="@isOperationInProgress">Enqueue</button>
            </div>
            break;
        case "Dequeue":
            <div class="insertion-fields">
                <label for="inputValue">Kx (Dequeue)</label>
                <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                <button class="custom-button" @onclick="Dequeue" disabled="@isOperationInProgress">Dequeue</button>
            </div>
            break;
        case "Create":
            <div class="insertion-fields">
                <label for="inputValue">Input Value</label>
                <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                <button class="custom-button" @onclick="CreateQueue" disabled="@isOperationInProgress">Create</button>
            </div>
            break;
        default:
            break;
    }
</div>

<div id="sll-display">
    @* Render the queue here *@
</div>

<div>@resultMessage</div>

@code {
    private QueueStructure<int> queue = new QueueStructure<int>();
    private string selectedAction = "";
    private int inputValue;
    private string operation;
    private string resultMessage;
    private bool isOperationInProgress = false;
    Random rand = new Random();

    protected override void OnInitialized()
    {
        queue.Enqueue(rand.Next(1, 30));
        queue.Enqueue(rand.Next(1, 30));
        queue.Enqueue(rand.Next(1, 30));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var queueData = ConvertQueueToJavaScriptFormat(queue);
            await JSRuntime.InvokeVoidAsync("drawLinkedList", queueData);
        }
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertQueueToJavaScriptFormat(QueueStructure<int> queue)
    {
        var nodes = new List<object>();
        var currentNode = queue.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

    private void CreateQueue(MouseEventArgs e)
    {
        if (isOperationInProgress) return;
        throw new NotImplementedException();
    }

    private void Dequeue(MouseEventArgs e)
    {
        if (isOperationInProgress) return;
        throw new NotImplementedException();
    }

    private void Enqueue(MouseEventArgs e)
    {
        if (isOperationInProgress) return;
        throw new NotImplementedException();
    }

    private void PeekBack(MouseEventArgs e)
    {
        if (isOperationInProgress) return;
        throw new NotImplementedException();
    }

    private void PeekFront(MouseEventArgs e)
    {
        if (isOperationInProgress) return;
        throw new NotImplementedException();
    }
}

