 @using DataStructuresVisualizer.DataStructures.Queue;

<h3>Queue</h3>

<!-- Operation list selection -->
<h5>Select Operation</h5>
<select @bind="operation">
    @foreach (var operation in operations)
    {
        <option value="@operation">@operation</option>
    }
</select>

@if (operation == "Dequeue")
{
    <h5>Enter how many nodes you want to dequeue</h5>
    <select @bind="nodesToDequeue">
        @for (int i = 0; i <= queue.Size(); i++)
        {
            <option value="@i">@i</option>
        }
    </select>
}

<!-- Queue List Display -->
<div id="queue-display">
    @if (!queue.IsEmpty())
    {
        var items = queue.ToList();
        for (int i = 0; i < items.Count; i++)
        {
            <div class="node">@items[i]</div>
            if (i < items.Count - 1) // Check if it's not the last item
            {
                <div class="arrow">→</div>
            }
        }
    }
</div>

<Button class="btn btn-primary" @onclick="(() => buttonVisualize(operation))">Visualize</Button>
<input @bind="inputData" type="text" placeholder="Enter node data" />

<div>@resultMessage</div>


<style>
    #queue-display {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .node {
        padding: 10px;
        border: 2px solid black;
        border-radius: 5px;
        text-align: center;
    }

    .queue-empty {
        padding: 10px;
        font-style: italic;
    }

    .arrow {
        font-size: 20px;
    }
</style>
@code {
    private QueueStructure<int> queue = new QueueStructure<int>();
    private int inputData;
    private int nodesToDequeue;
    private string[] operations = { "Peek", "Enqueue", "Dequeue", "Create" };
    private string operation;
    private string resultMessage;
    Random rand = new Random();

    Stack<int> stack = new Stack<int>();
    protected override void OnInitialized()
    {
        queue = new QueueStructure<int>();
        queue.Enqueue(rand.Next(1, 30));
        queue.Enqueue(rand.Next(1, 30));
        queue.Enqueue(rand.Next(1, 30));
    }

    void buttonVisualize(string operation)
    {
        switch (operation)
        {
            case "Enqueue":
                queue.Enqueue(inputData);
                break;
            case "Dequeue":
                queue.Dequeue(nodesToDequeue);
                break;
            case "Peek":
                queue.Peek();
                break;
            case "Create":
                this.OnInitialized();

                break;
        }
    }
}
