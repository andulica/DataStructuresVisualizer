       @using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
       @inject IJSRuntime JSRuntime

<div id="linked-list">
    <h3>SinglyLinkedList</h3>

    <!-- Operation list selection -->
    <h5>Insert value</h5>
    <div>
        <input @bind="inputValue" type="number" placeholder="Enter value" />
        <button @onclick="() => InsertValue()">Insert</button>
        <button @onclick="() => SearchValue()">Search</button>
        <button @onclick="() => RemoveValue()">Remove</button>
        <button @onclick="() => CreateSinglyLinkedList()">Create</button>
    </div>


    <div id="sll-display">
    </div>
</div>


@code {
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    private int inputValue;
    Random rand = new Random();


    protected override void OnInitialized()
    {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateDisplay(linkedList);
        }
    }

    private void InsertValue()
    {
        linkedList.AddLast(inputValue);
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private async Task SearchValue()
    {
        await JSRuntime.InvokeVoidAsync("searchValueInSLL", inputValue);
    }

    private void RemoveValue()
    {
        linkedList.Remove(inputValue);
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private void CreateSinglyLinkedList()     {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private async Task UpdateDisplay(SinglyLinkedList<int> list)
    {
        var linkedListData = ConvertListToJavaScriptFormat(list);
        await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData);
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.head;
        while (currentNode != null)
        {
            nodes.Add(new 
                { 
                    value = currentNode._data, 
                    next = currentNode.Next, 
                    id = currentNode.Id
                });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

}

