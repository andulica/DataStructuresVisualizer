@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>


<div id="linked-list" class="container">
    <h3>Singly Linked List Operations</h3>

    <div class="operation-selection">
        <select @bind="selectedAction">
            <option value="insertAtPosition">InsertAtPosition</option>
            <option value="prepend">Prepend</option>
            <option value="append">Append</option>
            <option value="search">Search</option>
            <option value="remove">Remove</option>
            <option value="create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "insertAtPosition":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <input type="number" @bind="insertPosition" placeholder="Enter Position" />
                    <button class="custom-button" @onclick="PerformInsertion">Insert</button>
                </div>
                break;
            case "prepend":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="PrependValue">Prepend</button>
                </div>
                break;
            case "append":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="AppendValue">Append</button>
                </div>
                break;
            case "search":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="SearchValue">Search</button>
                </div>
                break;
            case "remove":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="RemoveValue">Remove</button>
                </div>
                break;
            case "create":
                <div class="create-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="CreateSinglyLinkedList">Create List</button>
                </div>
                break;
            default:
                break;
        }
    </div>

    <div id="sll-display">
        @* Render the linked list here *@
    </div>

    <div>@messageOutput</div>

    @foreach (var node in linkedList)
    {
        <div class="node-with-arrows">

            <div class="node">@node._data</div>
            @if (node.Next != null)
            {
                <div class="arrow down">→</div>
            }
        </div>
    }
    <div>@messageOutput</div>
</div>


@code {
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    Random rand = new Random();
    private string selectedAction = "none";
    private int insertPosition;
    private int inputValue;
    private string messageOutput = "";

    protected override void OnInitialized()
    {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateDisplay(linkedList);
        }
    }

    private void PrependValue()
    {
        linkedList.Prepend(inputValue);
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private void AppendValue()
    {
        linkedList.Append(inputValue);
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private async Task SearchValue()
    {
        await JSRuntime.InvokeVoidAsync("searchValueInSLL", inputValue);
    }

    private async Task RemoveValue()
    {
        var nodeToRemove = linkedList.Search(inputValue);
        if (nodeToRemove != null)
        {
            var nodeInfo = ConvertNodeToJavaScriptFormat(nodeToRemove);

            linkedList.Delete(inputValue);

            await JSRuntime.InvokeVoidAsync("removeValueInSll", nodeInfo);
        }

        await JSRuntime.InvokeVoidAsync("resetSllColours");
    }

    private void CreateSinglyLinkedList()
    {
        linkedList = new SinglyLinkedList<int>();
        for (int i = 0; i < inputValue; i++)
        {
            linkedList.Append(rand.Next(1, 30));
        }
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private async Task UpdateDisplay(SinglyLinkedList<int> list)
    {
        var linkedListData = ConvertListToJavaScriptFormat(list);
        await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData);
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        if (node == null)
        {
            messageOutput = "List is full";
            return null;
        }

        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private async Task PerformInsertion()
    {
        var insertedValue = ConvertNodeToJavaScriptFormat(linkedList.InsertAt(insertPosition, inputValue));
        if (insertPosition > linkedList.Count - 1)
        {
            insertPosition = linkedList.Count - 1;
        }
        await JSRuntime.InvokeVoidAsync("insertAtInSLL", insertedValue, insertPosition);
    }
}               