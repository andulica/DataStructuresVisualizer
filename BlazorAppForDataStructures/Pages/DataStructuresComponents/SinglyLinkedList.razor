@page "/visualize/SinglyLinkedList"
@using DataStructuresVisualizer.DataStructures.Enums.SinglyLinkedList;
@using DataStructuresVisualizer.DataStructures
@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@using DataStructuresVisualizer.Snapshot;
@using BlazorAppForDataStructures.Shared;
@using DataStructuresVisualizer;

@inject IJSRuntime JSRuntime
@inject CancellationService CancellationService
@inject NotificationService NotificationService
@implements IDisposable

<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>

<div id="linked-list" class="container">
    <h3>Singly Linked List Operations</h3>

    <div class="operation-selection">
        <select @onchange="OnActionChanged">
            <option value="" disabled selected>Select an Operation</option> <!-- Initial message -->
            <option value="insertAtPosition">Insert At Position</option>
            <option value="prepend">Prepend</option>
            <option value="append">Append</option>
            <option value="search">Search</option>
            <option value="remove">Remove</option>
            <option value="create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "insertAtPosition":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <label for="insertPosition">Insert Position</label>
                    <input type="number" id="insertPosition" @bind="insertPosition" placeholder="Enter Position" />

                    <button class="custom-button" @onclick="PerformInsertion" disabled="@isOperationInProgress">Insert</button>
                </div>
                break;
            case "prepend":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="PrependValue" disabled="@isOperationInProgress">Prepend</button>
                </div>
                break;
            case "append":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="AppendValue" disabled="@isOperationInProgress">Append</button>
                </div>
                break;
            case "search":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="SearchValue" disabled="@isOperationInProgress">Search</button>
                </div>
                break;
            case "remove":
                <div class="insertion-fields">
                    <label for="inputValue">Input Index</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="RemoveValue" disabled="@isOperationInProgress">Remove</button>
                </div>
                break;
            case "create":
                <div class="create-fields">
                    <label for="inputValue">Number of Nodes</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="CreateSinglyLinkedList">Create List</button>
                </div>
                break;
            default:
                break;
        }
    </div>

    <div id="sll-display">
        @* Render the linked list here *@
    </div>

    <CodeDisplay CodeLines="@currentCode" />

    @if (!string.IsNullOrEmpty(messageOutput))
    {
        <div class="notification-container">
            <span class="notification-message">@messageOutput</span>
            <button class="notification-close" @onclick="() => NotificationService.ClearMessage()">✖</button>
        </div>
    }
</div>

@code {
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    private Random rand = new Random();
    private string _selectedAction = "create";
    private int insertPosition;
    private int inputValue;
    private string messageOutput = "";
    private IEnumerable<string> currentCode = Enumerable.Empty<string>();
    private const bool isStack = false;
    bool isOperationInProgress = false;

    VisualizationTiming timing = VisualizationTiming.Default;

    public string selectedAction
    {
        get => _selectedAction;
        set
        {
            if (_selectedAction != value)
            {
                _selectedAction = value;
                currentCode = GetCodeByOperation(value);
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        linkedList.Add(rand.Next(1, 30));
        linkedList.Add(rand.Next(1, 30));
        linkedList.Add(rand.Next(1, 30));

        SubscribingNewList();
    }

    private CancellationToken InitializeNewOperation()
    {
        CancellationService.ResetCancellationTokenSource();
        return CancellationService.GetToken();
    }

    private void OnActionChanged(ChangeEventArgs e)
    {
        selectedAction = e.Value.ToString();
        InitializeNewOperation(); // Cancel the ongoing operation when a new action is selected
    }

    private void HandleMessageAdded(string message)
    {
        messageOutput = message;
        StateHasChanged();
    }

    private void HandleMessageCleared()
    {
        messageOutput = string.Empty;
        StateHasChanged();
    }

    public void Dispose()
    {
        CancellationService.ResetCancellationTokenSource();

        UnsubscribingOldList();
    }

    private async Task HandleHighlightRequest(Enum step)
    {
        await JSRuntime.InvokeVoidAsync("highlightLine", step);
        await Task.Delay(timing.HighlightDelay);
    }

    private async Task UpdateDisplay(SinglyLinkedList<int> list)
    {
        var linkedListData = ConvertListToJavaScriptFormat(list);
        await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData, false);
    }

    private async void CreateNewList()
    {
        NotificationService.AddMessage($"The list is empty. New list has been created.");
        await CreateSinglyLinkedList();
    }

    private void SubscribingNewList()
    {
        NotificationService.OnMessageAdded += HandleMessageAdded;
        NotificationService.OnMessageCleared += HandleMessageCleared;
        linkedList.HighlightRequested += HandleHighlightRequest; // Subscribe to highlight events
    }

    private void UnsubscribingOldList()
    {
        NotificationService.OnMessageAdded -= HandleMessageAdded;
        NotificationService.OnMessageCleared -= HandleMessageCleared;
        linkedList.HighlightRequested -= HandleHighlightRequest;
    }

    private IEnumerable<string> GetCodeByOperation(string operation)
    {
        Dictionary<string, IEnumerable<string>> codeSnippets = new Dictionary<string, IEnumerable<string>>
            {
                ["search"] = new List<string>
                {
                    "if empty, return NOT_FOUND",
                    "index = 0, tmp = head",
                    "while (tmp.item != v)",
                    "index++, tmp = tmp.next,\n if tmp == null,",
                    "    return NOT_FOUND",
                    "return index"
                },
                ["prepend"] = new List<string>
                {
                    "Vertex vtx = new Vertex(v)",
                    "vtx.next = head",
                    "head = vtx"
                },
                ["append"] = new List<string>
                {
                    "Vertex vtx = new Vertex(v)",
                    "tail.next = vtx",
                    "tail = vtx"
                },
                ["insertAtPosition"] = new List<string>
                {
                    "Vertex pre = head",
                    "for (k = 0; k<i-1; k++)",
                    "  pre = pre.next",
                    "Vertex aft = pre.next",
                    "Vertex vtx = new Vertex(v)",
                    "vtx.next = aft",
                    "pre.next = vtx"
                },
                ["remove"] = new List<string>
                {
                    "if empty, do nothing",
                    "Vertex pre = head",
                    "for (k = 0; k<i-1; k++)",
                    "  pre = pre.next",
                    "Vertex del = pre.next, after = del.next",
                    "pre.next = after",
                    "delete del"
                }
            };

        if (codeSnippets.TryGetValue(operation, out var code))
        {
            return code;
        }
        return new List<string> { "Select an operation to view the code." };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateDisplay(linkedList);
        }
    }

    private async Task PerformInsertion()
    {
        var token = InitializeNewOperation();

        if (linkedList.IsFull())
        {
            NotificationService.AddMessage($"The list has reached its maximum capacity of {linkedList.maxCapacity} nodes.Cannot insert a new node.");
            return;
        }

        if (linkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        if (insertPosition <= 0 || insertPosition >= linkedList.Count)
        {
            NotificationService.AddMessage($"The position to insert must be greater than 0 and no bigger than {linkedList.Count - 1}");
            return;
        }

        var newNode = new SinglyLinkedListNode<int>(inputValue);
        var insertedValue = ConvertNodeToJavaScriptFormat(newNode);

        try
        {
            isOperationInProgress = true;

            var insertTask = linkedList.InsertAtAsync(insertPosition, newNode, token);
            var jsTask = JSRuntime.InvokeVoidAsync("insertAtInSLL", insertedValue, insertPosition, timing.JavaScriptDelay).AsTask();

            await Task.WhenAll(insertTask, jsTask);
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("SllCancelVisuals");
            if (!linkedList.Contains(newNode))
            {
                linkedList.InsertAtInstant(insertPosition, newNode);
            }

            await UpdateDisplay(linkedList);

            NotificationService.AddMessage($"Visual cancelled. Value {inputValue} inserted at index {insertPosition}.");
        }
        finally
        {
            FinishVisual();
        }
    }

    private async Task PrependValue()
    {
        var token = InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (linkedList.IsFull())
        {
            NotificationService.AddMessage($"The list has reached its maximum capacity of {linkedList.maxCapacity} nodes. Cannot insert a new node.");
            return;
        }

        if (linkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        var head = new SinglyLinkedListNode<int>(inputValue);
        var headForJSInsertion = ConvertNodeToJavaScriptFormat(head);

        try
        {
            isOperationInProgress = true;

            var prependTask = linkedList.PrependAsync(head, token);
            var jsTask = JSRuntime.InvokeVoidAsync("insertHeadInSll", headForJSInsertion, timing, isStack).AsTask();

            await Task.WhenAll(prependTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("SllCancelVisuals");

            if (!linkedList.Contains(head))
            {
                linkedList.PrependInstant(head); // Insert the node instantly in case of an exception)
            }
            await UpdateDisplay(linkedList);

            NotificationService.AddMessage($"Visual cancelled. Value {inputValue} prepended.");
        }
        finally
        {
            FinishVisual();
        }
    }

    private async Task AppendValue()
    {
        var token = InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (linkedList.IsFull())
        {
            NotificationService.AddMessage($"The list has reached its maximum capacity of {linkedList.maxCapacity} nodes. Cannot insert a new node.");
            return;
        }

        if (linkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        var tail = new SinglyLinkedListNode<int>(inputValue);
        var tailToInsert = ConvertNodeToJavaScriptFormat(tail);

        try
        {
            isOperationInProgress = true;

            var appendTask = linkedList.AppendAsync(tail, token);
            var jsTask = JSRuntime.InvokeVoidAsync("insertTailInSll", tailToInsert, timing).AsTask();

            await Task.WhenAll(appendTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("SllCancelVisuals");
            if (!linkedList.Contains(tail))
            {
                linkedList.AppendInstant(tail); // Insert the node instantly in case of an exception)
            }

            await UpdateDisplay(linkedList);

            NotificationService.AddMessage($"Visual cancelled. Value {inputValue} appended.");
        }
        finally
        {
            FinishVisual();
        }
    }

    private async Task SearchValue()
    {
        var token = InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (linkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        try
        {
            isOperationInProgress = true;

            var searchTask = linkedList.SearchByValueAsync(inputValue, token);
            var jsTask = JSRuntime.InvokeVoidAsync("searchValueInSLL", inputValue, timing).AsTask();

            await Task.WhenAll(searchTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("SllCancelVisuals");

            NotificationService.AddMessage($"Visual cancelled.");

            await UpdateDisplay(linkedList);
        }
        finally
        {
            FinishVisual();
        }
    }

    private async Task RemoveValue()
    {
        var token = InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (linkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        if (linkedList.Count == 0 || inputValue >= linkedList.Count)
        {
            NotificationService.AddMessage($"The index {inputValue} you are trying to delete does not exist.");
            return;
        }

        var nodeToRemove = linkedList.FindNodeByIndex(inputValue);
        var nodeToBeDeleted = ConvertNodeToJavaScriptFormat(nodeToRemove);

        try
        {
            isOperationInProgress = true;

            var removeTask = linkedList.DeleteAtAsync(inputValue, token);
            var jsTask = JSRuntime.InvokeVoidAsync("removeValueInSll", nodeToBeDeleted, timing).AsTask();

            await Task.WhenAll(removeTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("SllCancelVisuals");

            // Use case where the above delete function gets the chance to delete the node resulting in no more nodes to delete so we continue with the message
            if (linkedList.Contains(nodeToRemove))
            {
                linkedList.DeleteAtInstant(nodeToRemove);
            }

            await UpdateDisplay(linkedList);

            NotificationService.AddMessage($"Visual cancelled. Node at index {inputValue} removed.");
        }
        finally
        {
            FinishVisual();
        }
    }

    private async void FinishVisual()
    {
        await JSRuntime.InvokeVoidAsync("resetCodeLineHighlight");

        await Task.Delay(Constants.operationCancellationTime);
        isOperationInProgress = false;
    }

    private async Task CreateSinglyLinkedList()
    {
        if (inputValue > linkedList.maxCapacity)
        {
            NotificationService.AddMessage($"The singly linked list can have a maximum number of {linkedList.maxCapacity} nodes. Please enter a smaller value.");
            return;
        }

        if (linkedList.Count == 0)
        {
            linkedList.Add(rand.Next(1, 30));
            linkedList.Add(rand.Next(1, 30));
            linkedList.Add(rand.Next(1, 30));
            SubscribingNewList();
            await UpdateDisplay(linkedList);
            return;
        }

        linkedList = new SinglyLinkedList<int>();
        SubscribingNewList();

        for (int i = 0; i < inputValue; i++)
        {
            linkedList.Add(rand.Next(1, 30));
        }

        await UpdateDisplay(linkedList);
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }
}