@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>

<div id="linked-list" class="container">
    <h3>Singly Linked List Operations</h3>

    <div class="operation-selection">
        <select @bind="selectedAction">
            <option value="insertAtPosition">Insert At Position</option>
            <option value="prepend">Prepend</option>
            <option value="append">Append</option>
            <option value="search">Search</option>
            <option value="remove">Remove</option>
            <option value="create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "insertAtPosition":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <input type="number" @bind="insertPosition" placeholder="Enter Position" />
                    <button class="custom-button" @onclick="PerformInsertion">Insert</button>
                </div>
                break;
            case "prepend":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="PrependValue">Prepend</button>
                </div>
                break;
            case "append":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="AppendValue">Append</button>
                </div>
                break;
            case "search":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="SearchValue">Search</button>
                </div>
                break;
            case "remove":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="RemoveValue">Remove</button>
                </div>
                break;
            case "create":
                <div class="create-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="CreateSinglyLinkedList">Create List</button>
                </div>
                break;
            default:
                break;
        }
    </div>

    <div id="sll-display">
        @* Render the linked list here *@
    </div>

    <CodeDisplay CodeLines="@currentCode" OnHighlightRequest="HandleHighlightRequest" />

    <div>@messageOutput</div>

    @foreach (var node in linkedList)
    {
        <div class="node-with-arrows">

            <div class="node">@node._data</div>
            @if (node.Next != null)
            {
                <div class="arrow down">→</div>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(messageOutput))
    {
        <div class="notification-container">
            <span class="notification-message">@messageOutput</span>
            <button class="notification-close" @onclick="ClearMessage">✖</button>

        </div>
    }
</div>

@code {

    private CodeDisplay? CodeDisplay;
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    private Random rand = new Random();
    private string _selectedAction = "search";
    private int insertPosition;
    private int inputValue;
    private string messageOutput = "";
    private IEnumerable<string> currentCode = Enumerable.Empty<string>();
    private string ? currentOperation = " ";

    public string selectedAction
    {
        get => _selectedAction;
        set
        {
            if (_selectedAction != value)
            {
                _selectedAction = value;
                currentCode = GetCodeByOperation(value);
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        linkedList.HighlightRequested += HandleHighlightRequest;
        linkedList.Add(rand.Next(1, 30));
        linkedList.Add(rand.Next(1, 30));
        linkedList.Add(rand.Next(1, 30));
        currentCode = GetCodeByOperation(_selectedAction);
    }

    private IEnumerable<string> GetCodeByOperation(string operation)
    {
        Dictionary<string, IEnumerable<string>> codeSnippets = new Dictionary<string, IEnumerable<string>>
            {
                ["search"] = new List<string>
                {
                    "if empty, return NOT_FOUND",
                    "index = 0, tmp = head",
                    "while (tmp.item != v)",
                    "  index++, tmp = tmp.next",
                    "  if tmp == null",
                    "    return NOT_FOUND",
                    "return index"
                },
                ["prepend"] = new List<string>
                {
                    "Vertex vtx = new Vertex(v)",
                    "vtx.next = head",
                    "head = vtx"
                },
                ["append"] = new List<string>
                {
                    "Vertex vtx = new Vertex(v)",
                    "tail.next = vtx",
                    "tail = vtx"
                },
                ["insertAtPosition"] = new List<string>
                {

                    "Vertex pre = head",
                    "for (k = 0; k<i-1; k++)",
                    "  pre = pre.next",
                    "Vertex aft = pre.next",
                    "Vertex vtx = new Vertex(v)",
                    "vtx.next = aft",
                    "pre.next = vtx"
                },
                ["remove"] = new List<string>
                {
                    "if empty, do nothing",
                    "Vertex pre = head",
                    "for (k = 0; k<i-1; k++)",
                    "  pre = pre.next",
                    "Vertex del = pre.next, after = del.next",
                    "pre.next = after",
                    "delete del"
                    
                }  
        };

        if (codeSnippets.TryGetValue(operation, out var code))
        {
            return code;
        }
        return new List<string> { "Select an operation to view the code." };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Convert the linked list to a format suitable for JavaScript
            var linkedListData = ConvertListToJavaScriptFormat(linkedList);
            // Call the JavaScript function to render the linked list
            await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData);
        }
    }

    private async Task PerformInsertion()
    {
        try
        {
            var insertedValue = ConvertNodeToJavaScriptFormat(linkedList.InsertAt(insertPosition, inputValue));
            if (insertPosition > linkedList.Count - 1)
            {
                insertPosition = linkedList.Count - 2;
            }
            await JSRuntime.InvokeVoidAsync("insertAtInSLL", insertedValue, insertPosition);
        }
        catch (InvalidOperationException ex)
        {
            messageOutput = ex.Message;
        }
    }

    private async Task PrependValue()
    {
        try
        {
            linkedList.Prepend(inputValue);
            var headToInsert = ConvertNodeToJavaScriptFormat(linkedList.Head);
            await JSRuntime.InvokeVoidAsync("insertAtInSLL", headToInsert, linkedList.GetHeadIndex());
        }
        catch (InvalidOperationException ex)
        {
            messageOutput = ex.Message;
        }
    }

    private async Task AppendValue()
    {
        try
        {
            linkedList.HighlightRequested += HandleHighlightRequest; // Subscribe to highlight events
            await linkedList.Append(inputValue);
            var tailToInsert = ConvertNodeToJavaScriptFormat(linkedList.Tail);
            await JSRuntime.InvokeVoidAsync("insertTailInSll", tailToInsert);
        }
        catch (InvalidOperationException ex)
        {
            messageOutput = ex.Message;
        }
        finally
        {
            linkedList.HighlightRequested -= HandleHighlightRequest; // Clean up event subscription
        }
    }

    private async Task SearchValue()
    {
        await JSRuntime.InvokeVoidAsync("searchValueInSLL", inputValue);
        var nodeToHighlight = linkedList.Search(inputValue);
    }

    private async Task RemoveValue()
    {
        // Await the asynchronous Search method
        var nodeToRemove = linkedList.Delete(inputValue);
        if (nodeToRemove != null)
        {
            var nodeInfo = ConvertNodeToJavaScriptFormat(nodeToRemove);
            linkedList.Delete(inputValue);
            await JSRuntime.InvokeVoidAsync("removeValueInSll", nodeInfo);
        }
        else
        {
            HighlightAllNodesOrDisplayMessage();
        }

        await JSRuntime.InvokeVoidAsync("resetSllColours");
    }

    private async Task CreateSinglyLinkedList()
    {
        if (linkedList != null)
        {
            // Optionally clear existing event subscriptions to prevent memory leaks
            linkedList.HighlightRequested -= HandleHighlightRequest;
        }

        linkedList = new SinglyLinkedList<int>();

        // Re-subscribe to the event
        linkedList.HighlightRequested += HandleHighlightRequest;

        for (int i = 0; i < inputValue; i++)
        {
            linkedList.Add(rand.Next(1, 30));
        }

        await UpdateDisplay(linkedList);
        await InvokeAsync(StateHasChanged);
    }

    private void HandleHighlightRequest(int lineIndex)
    {
        JSRuntime.InvokeVoidAsync("highlightLine", lineIndex);
    }

    private async Task UpdateDisplay(SinglyLinkedList<int> list)
    {
        var linkedListData = ConvertListToJavaScriptFormat(list);
        await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData);
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

    private void HighlightAllNodesOrDisplayMessage()
    {
        messageOutput = "The entered number is not in the singly linked list.";
    }

    private void ClearMessage()
    {
        messageOutput = "";
    }
}            