       @using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
       @inject IJSRuntime JSRuntime

<div id="linked-list">
    <h3>SinglyLinkedList</h3>

    <!-- Operation list selection -->
    <h5>Insert value</h5>
    <div>
        <input @bind="inputValue" type="number" placeholder="Enter value" />
        <button @onclick="() => InsertValue()">Insert</button>
        <button @onclick="() => SearchValue()">Search</button>
        <button @onclick="() => RemoveValue()">Remove</button>
        <button @onclick="() => CreateSinglyLinkedList()">Create</button>
    </div>


    <div id="sll-display">
        @* Render the tree here *@
    </div>
   
</div>


@code {
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    private int inputValue;
    private string resultMessage;
    Random rand = new Random();


    protected override void OnInitialized()
    {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateDisplay(linkedList);
        }
    }

    private void InsertValue()
    {
        linkedList.AddLast(inputValue); // Insert at the end of the linked list
        UpdateDisplay(linkedList).ContinueWith(_ => { }); // Update display with the new node
    }

    private void SearchValue()
    {
        bool result = linkedList.Contains(inputValue);
        resultMessage = result ? $"Value {inputValue} found." : $"Value {inputValue} not found.";
    }

    private void RemoveValue()
    {
        linkedList.Remove(inputValue); // Remove the specified value from the linked list
        UpdateDisplay(linkedList).ContinueWith(_ => { }); // Handle async call without await
    }

    private void CreateSinglyLinkedList()     {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        UpdateDisplay(linkedList).ContinueWith(_ => { }); // Handle async call without await
    }

    private async Task UpdateDisplay(SinglyLinkedList<int> list)
    {
        var linkedListData = ConvertNodeToD3Format(list.head);
        await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData);
    }

    private object ConvertNodeToD3Format(SinglyLinkedListNode<int> node)
    {
        if (node == null)
        {
            return null;
        }

        return new
        {
            value = node._data,
            // Add other properties as needed for visualization, such as position
        };
    }
}

