@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@inject IJSRuntime JSRuntime

<div id="linked-list">
    <h3>SinglyLinkedList</h3>

    <!-- Operation list selection -->
    <h5>Insert value</h5>
    <div>
        <input @bind="inputValue" type="number" placeholder="Enter value" />
        <button @onclick="() => InsertValue()">Insert</button>
        <button @onclick="() => PrependValue()">Prepend</button>
        <button @onclick="() => AppendValue()">Append</button>
        <button @onclick="() => SearchValue()">Search</button>
        <button @onclick="() => RemoveValue()">Remove</button>
        <button @onclick="() => CreateSinglyLinkedList()">Create</button>
    </div>

    <select @onchange="OnSelectionChange">
        <option value="none">Select an Action</option>
        <option value="insertion">Insertion</option>
    </select>

    @if (showInsertionFields)
    {
        <div>
            <input type="number" @bind="insertValue" placeholder="Enter Value" />
            <input type="number" @bind="insertPosition" placeholder="Enter Position" />
            <button @onclick="PerformInsertion">Insert</button>
        </div>
    }
    <div id="sll-display">
        @* Render the linked list here *@
    </div>

     @foreach (var node in linkedList)
     {
         <div class="node-with-arrows">
            
             <div class="node">@node._data</div>
             @if (node.Next != null)
             {
                 <div class="arrow down">→</div>
             }
         </div>
     }
</div>


@code {
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    private int inputValue;
    Random rand = new Random();
    private string selectedAction = "none";
    private int insertValue;
    private int insertPosition;
    private bool showInsertionFields = false;


    protected override void OnInitialized()
    {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateDisplay(linkedList);
        }
    }

    private void PrependValue()
    {
        linkedList.Prepend(inputValue);
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private void AppendValue()
    {
        linkedList.Append(inputValue);
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private void InsertValue()
    {
        linkedList.AddLast(inputValue);
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private async Task SearchValue()
    {
        await JSRuntime.InvokeVoidAsync("searchValueInSLL", inputValue);
    }

    private async Task RemoveValue()
    {
        var nodeToRemove = linkedList.Search(inputValue);
        if (nodeToRemove != null)
        {
            var nodeInfo = ConvertNodeToJavaScriptFormat(nodeToRemove);

            linkedList.Delete(inputValue);

            await JSRuntime.InvokeVoidAsync("removeValueInSll", nodeInfo);
        }


    }

    private void CreateSinglyLinkedList()
    {
        linkedList = new SinglyLinkedList<int>();
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        linkedList.Append(rand.Next(1, 30));
        UpdateDisplay(linkedList).ContinueWith(_ => { });
    }

    private async Task UpdateDisplay(SinglyLinkedList<int> list)
    {
        var linkedListData = ConvertListToJavaScriptFormat(list);
        await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData);
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private void OnSelectionChange(ChangeEventArgs e)
    {
        selectedAction = e.Value.ToString();
        showInsertionFields = selectedAction == "insertion";
    }

    private async Task PerformInsertion()
    {
        var insertedValue = ConvertNodeToJavaScriptFormat(linkedList.InsertAt(insertPosition, insertValue));
        if (insertPosition >= linkedList.Count)
        {
            insertPosition = linkedList.Count;
        }
        await JSRuntime.InvokeVoidAsync("insertAtInSLL", insertedValue, insertPosition);
    }
}               