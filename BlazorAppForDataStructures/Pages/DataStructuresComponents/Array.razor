@inject NavigationManager NavigationManager
@using DataStructuresVisualizer.DataStructures;

<h3>Array</h3>

<div id="array">
    <h5>Select Operation</h5>
    <select @bind="operation">
        @foreach (var op in operations)
        {
            <option value="@op">@op</option>
        }
    </select>

    <div class="array">
        @for (int i = 0; i < array.Count; i++)
        {
            <div class="node">@DisplayValue(array[i])</div>
        }
    </div>

    <Button class="btn btn-primary" @onclick="(() => buttonVisualize(operation))">Visualize</Button>
    <input @bind="inputData" type="text" placeholder="Enter node data" />
    <div>@resultMessage</div>
</div>


<style>
    .array {
        display: flex;
        flex-direction: row;
    }

    .node {
        border: 1px solid black;
        width: 50px;
        height: 50px;
        margin-right: 2px;
        text-align: center;
        line-height: 50px;
    }

    .null-node {
        background-color: lightgray;
    }
</style>


@code {
    private List<int> array = new List<int>(new int[Constants.DEFAULT_ARRAY_CAPACITY]);
    private int inputData;
    private string[] operations = { "Add Value", "Delete Value", "Search Value", "Create New Empty Array" };
    private string operation;
    private string resultMessage;
    Random rand = new Random();

    private string DisplayValue(int value)
    {
        return value != 0 ? value.ToString() : string.Empty;
    }

    private void CreateNewArray()
    {
        array = new List<int>(new int[Constants.DEFAULT_ARRAY_CAPACITY]);
        resultMessage = "Array has been re-initialized";
    }

    void buttonVisualize(string operation)
    {
        switch (operation)
        {
            case "Add Value":
                // Find the first index that contains the default value
                int firstDefaultIndex = array.FindIndex(x => x == default(int));

                // If a default slot is found, replace it with inputData
                if (firstDefaultIndex != -1)
                {
                    array[firstDefaultIndex] = inputData;
                    resultMessage = $"Value of {inputData} was added to the array";
                }

                inputData = 0;
                break;

            case "Delete Value":

                if (array.Contains(inputData))
                {
                    int temp = array.IndexOf(inputData);
                    array[temp] = default;
                    resultMessage = $"Value of {inputData} was deleted from the array";
                }
                break;

            case "Search Value":
                for (int i = 0; i < array.Count; i++)
                {
                    if (array.Contains(inputData))
                    {
                        resultMessage = $"Value of {inputData} was found at position {array.IndexOf(inputData)} in the array";
                    }

                    else
                    {
                        resultMessage = $"Value of {inputData} is not in the array";
                    }
                }
                break;

            case "Create New Empty Array":
                this.CreateNewArray();               
                break;
        }
    }
}