@inject NavigationManager NavigationManager
@using DataStructuresVisualizer.DataStructures.Stack;
@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@using DataStructuresVisualizer.DataStructures;
@inject IJSRuntime JSRuntime


<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>

<div id="linked-list" class="container">
    <h3>Stack</h3>

    <!-- Operation list selection -->
    <div class="operation-selection">
        <select @bind="selectedAction">
            <option value="Peek">Peek</option>
            <option value="Push">Push</option>
            <option value="Pop">Pop</option>
            <option value="Create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "Peek":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>

                    <button class="custom-button" @onclick="Peek" disabled="@isOperationInProgress">Peek</button>
                </div>
                break;
@*              case "Push":
                 <div class="insertion-fields">
                     <label for="inputValue">Input Value</label>
                     <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                     <button class="custom-button" @onclick="Push" disabled="@isOperationInProgress">Push</button>
                 </div>
                break; *@
            case "Pop":
                <div class="insertion-fields">
                    <label for="inputValue">Kx (Pop)</label>

                    <button class="custom-button" @onclick="Pop" disabled="@isOperationInProgress">Pop</button>
                </div>
                break;
            case "Create":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="CreateStack" disabled="@isOperationInProgress">Create</button>
                </div>
                break;
            default:
                break;
        }
    </div>

    <div id="sll-display">
        @* Render the linked list here *@
    </div>

    <div>@messageOutput</div>
</div>


@code {
    private SinglyLinkedList<int> stack = new SinglyLinkedList<int>();
    private string selectedAction = "Peek";
    private int inputValue;
    private string messageOutput;
    private bool isOperationInProgress = false;
    private bool isStack = true;
    Random rand = new Random();


    protected override void OnInitialized()
    {
        stack.Add(rand.Next(1, 30));
        stack.Add(rand.Next(1, 30));
        stack.Add(rand.Next(1, 30));
    }

    private async Task Peek()
    {
        if (isOperationInProgress) return;

        isOperationInProgress = true;
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("highlightHead");
        }
        catch (JSException jsEx)
        {
            // Handle JavaScript-related exceptions
            Console.Error.WriteLine($"JavaScript error: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            // Handle any other exceptions
            Console.Error.WriteLine($"Unexpected error: {ex.Message}");
        }
        finally
        {
            isOperationInProgress = false;
            StateHasChanged();
        }
    }

    // private async Task Push()
    // {
    //     if (isOperationInProgress) return;

    //     if (stack.Count == stack.maxCapacity)
    //     {
    //         messageOutput = $"The stack has reached the maximum number of nodes. Please pop a value or create a smaller stack.";
    //         return;
    //     }

    //     isOperationInProgress = true;
    //     StateHasChanged();

    //     try
    //     {

    //         var head = new SinglyLinkedListNode<int>(inputValue);

    //         var timing = new VisualizationTiming
    //             {
    //                 HighlightDelay = 1000, // Set appropriate delay values
    //                 NodeMovementDelay = 1500,
    //                 JavaScriptDelay = 2000
    //             };
    //         await stack.PrependAsync(head); // Wait for the node to be pushed onto the stack
    //         var nodeToBePushedOnSVG = ConvertNodeToJavaScriptFormat(head);
    //         await JSRuntime.InvokeVoidAsync("insertAtInSLL", nodeToBePushedOnSVG, 0, 1000, isStack); // Then update the UI
    //     }
    //     finally
    //     {
    //         isOperationInProgress = false;
    //         StateHasChanged();
    //     }
    // }

    private async Task Pop()
    {
        if (isOperationInProgress) return;

        isOperationInProgress = true;
        StateHasChanged();

        try
        {
            var nodeToBeRemoved = stack.Head;
            var nodeToBeRemovedOnSVG = ConvertNodeToJavaScriptFormat(nodeToBeRemoved);
            // await stack.DeleteAtAsync(0, 0);
            await JSRuntime.InvokeVoidAsync("removeValueInSll", nodeToBeRemovedOnSVG, 1000, true);
        }
        finally
        {
            isOperationInProgress = false;
            StateHasChanged();
        }
    }

    private async Task CreateStack()
    {
        if (isOperationInProgress) return; // Prevent multiple operations

        if (inputValue > stack.maxCapacity)
        {
            messageOutput = $"The stack can have a maximum number of {stack.maxCapacity} nodes. Please enter a smaller value.";
            return;
        }
        isOperationInProgress = true;
        StateHasChanged();
        try
        {
            stack = new StackStructure<int>();

            for (int i = 0; i < inputValue; i++)
            {
                stack.Add(rand.Next(1, 30));
            }

            await UpdateDisplay(stack);
            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            isOperationInProgress = false; // Reset flag after operation
            StateHasChanged();
        }
    }

    private async Task UpdateDisplay(SinglyLinkedList<int> stack)
    {
        var stackData = ConvertListToJavaScriptFormat(stack);
        await JSRuntime.InvokeVoidAsync("drawLinkedList", stackData, true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Convert the linked list to a format suitable for JavaScript
            var stackData = ConvertListToJavaScriptFormat(stack);
            await JSRuntime.InvokeVoidAsync("drawLinkedList", stackData, true);
        }
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }
}
