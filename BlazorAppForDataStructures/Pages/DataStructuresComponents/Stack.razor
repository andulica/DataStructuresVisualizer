@inject NavigationManager NavigationManager
@using DataStructuresVisualizer.DataStructures.Stack;

<div id="stack-component">
    <h3>Stack</h3>

    <!-- Operation list selection -->
    <h5>Select Operation</h5>
    <select @bind="operation">
        @foreach (var op in operations)
        {
            <option value="@op">@op</option>
        }
    </select>

    <!-- Stack Display -->
    <div class="stack-container">
        @for (int i = stack.count - 1; i >= 0; i--)
        {
            <div class="stack-item">@stack.ElementAt(i)</div>
            @if (i > 0) // Only add arrows between elements, not after the last element
            {
                <div class="stack-arrow">↓</div>
            }
        }
    </div>

    <Button class="btn btn-primary" @onclick="(() => buttonVisualize(operation))">Visualize</Button>
    <input @bind="inputData" type="text" placeholder="Enter item" />

    <div>@resultMessage</div>
</div>


<style>
    #stack-component {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .stack {
        display: flex;
        flex-direction: column-reverse; /* Stack items will be displayed from bottom to top */
        align-items: center;
    }

    .stack-item {
        padding: 10px;
        border: 2px solid black;
        border-radius: 5px;
        text-align: center;
        width: 100%;
        box-sizing: border-box;
    }

    .stack-container {
        display: flex;
        flex-direction: column-reverse; /* Display elements from top to bottom */
        align-items: center; /* Center-align the stack items */
    }

    .stack-base {
        padding: 5px;
        text-align: center;
    }

    .stack-arrow {
        color: #666;
        font-size: 20px;
    }

    .btn-primary {
        margin-top: 10px;
    }

</style>

@code {
    private StackStructure<int> stack = new StackStructure<int>();
    private int inputData;
    private string[] operations = { "Peak", "Pop", "Push", "Create"};
    private string operation;
    private string resultMessage;
    Random rand = new Random();


    protected override void OnInitialized()
    {
        stack = new StackStructure<int>();
        stack.Push(rand.Next(1, 30));
        stack.Push(rand.Next(1, 30));
        stack.Push(rand.Next(1, 30));
    }

    void buttonVisualize(string operation)
    {
        switch (operation)
        {
            case "Peak":               
                resultMessage = $"{stack.Peek()} is the top value";
                break;
            case "Pop":
                stack.Pop();
                break;
            case "Push":
                stack.Push(inputData);
                resultMessage = $"{inputData} was pushed on the stack";
                break;
            case "Create":
                this.OnInitialized();
                break;
        }
    }
}
