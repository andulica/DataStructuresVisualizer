@inject NavigationManager NavigationManager
@using DataStructuresVisualizer.DataStructures.Stack;


<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>

<div id="linked-list" class="container">
    <h3>Stack</h3>

    <!-- Operation list selection -->
    <div class="operation-selection">
        <select @bind="selectedAction">
            <option value="Peek">Peek</option>
            <option value="Enqueue">Enqueue</option>
            <option value="Dequeue">Dequeue</option>
            <option value="Create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "Peek":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="Peek" disabled="@isOperationInProgress">Peek</button>
                </div>
                break;
            case "Push":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="Push" disabled="@isOperationInProgress">Push</button>
                </div>
                break;
            case "Pop":
                <div class="insertion-fields">
                    <label for="inputValue">Kx (Pop)</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="Pop" disabled="@isOperationInProgress">Pop</button>
                </div>
                break;
            case "Create":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="CreateStack" disabled="@isOperationInProgress">Create</button>
                </div>
                break;
            default:
                break;
        }
    </div>

    <div>@messageOutput</div>
</div>


@code {
    private StackStructure<int> stack = new StackStructure<int>();
    private string selectedAction = "Peek";
    private int inputValue;
    private string messageOutput;
    private bool isOperationInProgress = false;
    Random rand = new Random();


    protected override void OnInitialized()
    {
        stack = new StackStructure<int>();
        stack.Push(rand.Next(1, 30));
        stack.Push(rand.Next(1, 30));
        stack.Push(rand.Next(1, 30));
    }

    private void Peek()
    {
        messageOutput = $"Top element is {stack.Peek()}";
    }

    private void Push()
    {
        stack.Push(inputValue);
        messageOutput = $"Element {inputValue} is pushed to the stack.";
    }

    private void Pop()
    {

        stack.Pop();
        messageOutput = $"Element is popped from the stack.";
    }

    private void CreateStack()
    {
        stack = new StackStructure<int>();
        messageOutput = "Stack is created.";
    }
}
