@inject NavigationManager NavigationManager
@using DataStructuresVisualizer.DataStructures.Stack;
@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@inject IJSRuntime JSRuntime


<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>

<div id="linked-list" class="container">
    <h3>Stack</h3>

    <!-- Operation list selection -->
    <div class="operation-selection">
        <select @bind="selectedAction">
            <option value="Peek">Peek</option>
            <option value="Push">Push</option>
            <option value="Pop">Pop</option>
            <option value="Create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "Peek":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="Peek" disabled="@isOperationInProgress">Peek</button>
                </div>
                break;
            case "Push":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="Push" disabled="@isOperationInProgress">Push</button>
                </div>
                break;
            case "Pop":
                <div class="insertion-fields">
                    <label for="inputValue">Kx (Pop)</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="Pop" disabled="@isOperationInProgress">Pop</button>
                </div>
                break;
            case "Create":
                <div class="insertion-fields">
                    <label for="inputValue">Input Value</label>
                    <input type="number" id="inputValue" @bind="inputValue" placeholder="Enter Value" />

                    <button class="custom-button" @onclick="CreateStack" disabled="@isOperationInProgress">Create</button>
                </div>
                break;
            default:
                break;
        }
    </div>

    <div id="sll-display">
        @* Render the linked list here *@
    </div>

    <div>@messageOutput</div>
</div>


@code {
    private StackStructure<int> stack = new StackStructure<int>();
    private string selectedAction = "Peek";
    private int inputValue;
    private string messageOutput;
    private bool isOperationInProgress = false;
    Random rand = new Random();


    protected override void OnInitialized()
    {
        stack.Add(rand.Next(1, 30));
        stack.Add(rand.Next(1, 30));
        stack.Add(rand.Next(1, 30));
    }

    private async Task Peek()
    {
        if (isOperationInProgress) return;

        isOperationInProgress = true;
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("highlightHead");
        }
        catch (JSException jsEx)
        {
            // Handle JavaScript-related exceptions
            Console.Error.WriteLine($"JavaScript error: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            // Handle any other exceptions
            Console.Error.WriteLine($"Unexpected error: {ex.Message}");
        }
        finally
        {
            isOperationInProgress = false;
            StateHasChanged();
        }
    }

    private async Task Push()
    {
        if (isOperationInProgress) return;

        if (stack.Count == stack.maxCapacity)
        {
            messageOutput = $"The stack has reached the maximum number of nodes. Please pop a value or create a smaller queue.";
            return;
        }

        isOperationInProgress = true;
        StateHasChanged();

        try
        {
            var nodeToEnqueue = await stack.PushAsync(inputValue); // Wait for the node to be pushed onto the stack
            var nodeToBeEnqueuedOnSVG = ConvertNodeToJavaScriptFormat(nodeToEnqueue);
            await JSRuntime.InvokeVoidAsync("insertAtInSLL", nodeToBeEnqueuedOnSVG, 0, 1000); // Then update the UI
        }
        finally
        {
            isOperationInProgress = false;
            StateHasChanged();
        }
    }


    private void Pop()
    {

        stack.Pop();
        messageOutput = $"Element is popped from the stack.";
    }

    private void CreateStack()
    {
        stack = new StackStructure<int>();
        messageOutput = "Stack is created.";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Convert the linked list to a format suitable for JavaScript
            var stackData = ConvertListToJavaScriptFormat(stack);
            await JSRuntime.InvokeVoidAsync("drawLinkedList", stackData, true);
        }
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }
}
