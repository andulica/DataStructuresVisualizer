@inject NavigationManager NavigationManager
@using DataStructuresVisualizer.DataStructures.DoublyLinkedListFile;

<div id="doubly-linked-list">
    <h3>DoublyLinkedList</h3>

    <!-- Operation list selection -->
    <h5>Select Operation</h5>
    <select @bind="operation">
        @foreach (var operation in operations)
        {
            <option value="@operation">@operation</option>
        }
    </select>

    @if (operation == "Insert at")
    {
        <h5>Choose Position</h5>
        <select @bind="desiredPosition">
            @for (int i = 0; i < doublyLinkedList.Count; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    }

    @if (operation == "Delete at")
    {
        <h5>Choose Position</h5>
        <select @bind="desiredPosition">
            @for (int i = 0; i < doublyLinkedList.Count; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    }

    <!-- Doubly Linked List -->
    <h5>Doubly Linked List</h5>
    @foreach (var node in doublyLinkedList)
    {
        <div class="node">@node._data</div>
        @if (node.Next != null)
        {
            <div class="arrow">→</div>
        }
    }


    <div class="node null-node">null</div>

    <Button class="btn btn-primary" @onclick="(() => buttonVisualize(operation))">Visualize</Button>
    <input @bind="inputData" type="text" placeholder="Enter node data" />

    <div>@resultMessage</div>
</div>


<style>
    #linked-list {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .node {
        padding: 10px;
        border: 2px solid black;
        border-radius: 5px;
        text-align: center;
    }

    .null-node {
        background-color: lightgray;
    }

    .arrow {
        font-size: 20px;
    }
</style>


@code {
    private DoublyLinkedList<int> doublyLinkedList = new DoublyLinkedList<int>();
    private int inputData;
    private int desiredPosition;
    private string[] operations = { "Insert at", "Append", "Prepend", "Delete at","Delete", "Search", "Create" };
    private string operation;
    private string resultMessage;
    Random rand = new Random();

    protected override void OnInitialized()
    {
        doublyLinkedList = new DoublyLinkedList<int>();
        doublyLinkedList.Append(rand.Next(1, 30));
        doublyLinkedList.Append(rand.Next(1, 30));
        doublyLinkedList.Append(rand.Next(1, 30));      

    }

    void buttonVisualize(string operation)
    {
        switch (operation)
        {
            case "Insert at":
                doublyLinkedList.InsertAt(inputData, desiredPosition);
                break;
            case "Append":
                doublyLinkedList.Append(inputData);
                break;
            case "Prepend":
                doublyLinkedList.Prepend(inputData);
                break;
            case "Delete":
                doublyLinkedList.Delete(inputData);
                break;
            case "Delete at":
                doublyLinkedList.DeleteAt(desiredPosition);
                break;
            case "Search":
                var position = doublyLinkedList.FindIndexOf(inputData);
                if (position != -1)
                {
                    resultMessage = $"The node with value {inputData} was found at position {position}.";
                }
                else
                {
                    resultMessage = "The node was not found.";
                }
                break;

            case "Create":
                this.OnInitialized();

                break;
        }
    }
}