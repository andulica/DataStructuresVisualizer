@inject NavigationManager NavigationManager
@using DataStructuresVisualizer.DataStructures.DoublyLinkedListFile;

<div id="doubly-linkedList" class="container">
    <h3>Doubly Linked List Operations</h3>

    <div class="operation-selection">
        <select @bind="selectedAction">
            <option value="insertAtPosition">InsertAtPosition</option>
            <option value="prepend">Prepend</option>
            <option value="append">Append</option>
            <option value="search">Search</option>
            <option value="remove">Remove</option>
            <option value="create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "insertAtPosition":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <input type="number" @bind="insertPosition" placeholder="Enter Position" />
                    <button class="custom-button" @onclick="PerformInsertion">Insert</button>
                </div>
                break;
            case "prepend":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="PrependValue">Prepend</button>
                </div>
                break;
            case "append":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="AppendValue">Append</button>
                </div>
                break;
            case "search":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="SearchValue">Search</button>
                </div>
                break;
            case "remove":
                <div class="insertion-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="RemoveValue">Remove</button>
                </div>
                break;
            case "create":
                <div class="create-fields">
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="CreateSinglyLinkedList">Create List</button>
                </div>
                break;
            default:
                break;
        }
    </div>

    <div id="dll-display">
        @* Render the linked list here *@
    </div>

    <div>@messageOutput</div>
    </div>



@code {
    private DoublyLinkedList<int> doublyLinkedList = new DoublyLinkedList<int>();
    private string selectedAction = "none";
    private int insertPosition;
    private int inputValue;
    private string messageOutput = "";
    Random rand = new Random();

    protected override void OnInitialized()
    {
        doublyLinkedList = new DoublyLinkedList<int>();
        doublyLinkedList.Append(rand.Next(1, 30));
        doublyLinkedList.Append(rand.Next(1, 30));
        doublyLinkedList.Append(rand.Next(1, 30));

    }

    private Task AppendValue(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
    private Task PerformInsertion(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
    private Task PrependValue(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
    private Task SearchValue(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
    private Task RemoveValue(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
    private Task CreateSinglyLinkedList(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }
}