@page "/doublyLinkedList"
@inject IJSRuntime JSRuntime
@using DataStructuresVisualizer.DataStructures.DoublyLinkedListFile

<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>

<div id="linked-list" class="container">

    <h3>Doubly Linked List Operations</h3>

    <div class="operation-selection">
        <select @bind="selectedAction">
            <option value="insertAtPosition">Insert At Position</option>
            <option value="prepend">Prepend</option>
            <option value="append">Append</option>
            <option value="search">Search</option>
            <option value="remove">Remove</option>
            <option value="create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "insertAtPosition":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <label>Insert Position:</label>
                    <input type="number" @bind="insertPosition" placeholder="Enter Position" />
                    <button class="custom-button" @onclick="PerformInsertion" disabled="@isOperationInProgress">Insert</button>
                </div>
                break;
            case "prepend":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="PrependValue" disabled="@isOperationInProgress">Prepend</button>
                </div>
                break;
            case "append":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="AppendValue" disabled="@isOperationInProgress">Append</button>
                </div>
                break;
            case "search":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="SearchValue" disabled="@isOperationInProgress">Search</button>
                </div>
                break;
            case "remove":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="RemoveValue" disabled="@isOperationInProgress">Remove</button>
                </div>
                break;
            case "create":
                <div class="create-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="CreateDoublyLinkedList" disabled="@isOperationInProgress">Create List</button>
                </div>
                break;
            default:
                break;
        }

        @if (!string.IsNullOrEmpty(messageOutput))
        {
            <div class="notification-container">
                <span class="notification-message">@messageOutput</span>
                <button class="notification-close" @onclick="ClearMessage">✖</button>
            </div>
        }
    </div>

    <div id="dll-display"></div>
</div>

@code {
    private string selectedAction = "create";
    private int inputValue;
    private int insertPosition;
    private bool isOperationInProgress = false;
    private Random rand = new Random();
    private string messageOutput = "";


    private DoublyLinkedList<int> doublyLinkedList = new DoublyLinkedList<int>();

    protected override void OnInitialized()
    {
        doublyLinkedList.Append(rand.Next(1, 30));
        doublyLinkedList.Append(rand.Next(1, 30));
        doublyLinkedList.Append(rand.Next(1, 30));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dllData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", dllData);
        }
    }

    private async Task PerformInsertion()
    {
        if (isOperationInProgress) return;

        if (doublyLinkedList.IsFull())
        {
            messageOutput = $"The list has reached its maximum capacity of {doublyLinkedList.maxCapacity} nodes. Cannot insert a new node.";
            return;
        }

        isOperationInProgress = true;

        try
        {
            await Task.Delay(500);
            var nodeToInsert = doublyLinkedList.InsertAt(inputValue, insertPosition);
            var dllData = ConvertNodeToJavaScriptFormat(nodeToInsert);
            await JSRuntime.InvokeVoidAsync("insertAtInDll", dllData, insertPosition, 1000);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task PrependValue()
    {
        if (isOperationInProgress) return;

        if (doublyLinkedList.IsFull())
        {
            messageOutput = $"The list has reached its maximum capacity of {doublyLinkedList.maxCapacity} nodes. Cannot insert a new node.";
            return;
        }

        StateHasChanged();
        isOperationInProgress = true;

        try
        {
            var nodeToInsert = doublyLinkedList.Prepend(inputValue);
            var dllData = ConvertNodeToJavaScriptFormat(nodeToInsert);
            await JSRuntime.InvokeVoidAsync("insertAtInDll", dllData, 0, 1000);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task AppendValue()
    {
        if (isOperationInProgress) return;

        if (doublyLinkedList.IsFull())
        {
            messageOutput = $"The list has reached its maximum capacity of {doublyLinkedList.maxCapacity} nodes. Cannot insert a new node.";
            return;
        }

        isOperationInProgress = true;

        try
        {
            await Task.Delay(500);
            var nodeToInsert = doublyLinkedList.Append(inputValue);
            var dllData = ConvertNodeToJavaScriptFormat(nodeToInsert);
            await JSRuntime.InvokeVoidAsync("insertTailInDll", dllData, 2000);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task SearchValue()
    {
        if (isOperationInProgress) return;
        isOperationInProgress = true;
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("searchValueInDLL", inputValue, 1000);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task RemoveValue()
    {
        if (isOperationInProgress) return;

        if (inputValue > doublyLinkedList.Count)
        {
            messageOutput = $"The index {inputValue} you are trying to delete does not exist. Please enter a smaller value.";
            return;
        }

        isOperationInProgress = true;
        StateHasChanged();

        try
        {
            var nodeToRemove = doublyLinkedList.FindNodeByIndex(inputValue);
            var nodeInfo = ConvertNodeToJavaScriptFormat(nodeToRemove);

            doublyLinkedList.Delete(inputValue);
            await JSRuntime.InvokeVoidAsync("removeValueInDll", nodeInfo, 1000);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task CreateDoublyLinkedList()
    {
        if (inputValue > doublyLinkedList.maxCapacity)
        {
            messageOutput = "The doubly linked list can have a maximum number of 6 nodes. Please enter a smaller value.";
            return;
        }

        isOperationInProgress = true;
        StateHasChanged();

        try
        {
            doublyLinkedList = new DoublyLinkedList<int>();
            for (int i = 0; i < inputValue; i++)
            {
                doublyLinkedList.Append(rand.Next(1, 30));
            }

            var linkedListData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", linkedListData);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private object ConvertNodeToJavaScriptFormat(DoublyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            prev = node.Prev != null ? node.Prev.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertListToJavaScriptFormat(DoublyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                prev = currentNode.Prev != null ? currentNode.Prev.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

    private void ClearMessage()
    {
        messageOutput = "";
    }
}