@page "/doublyLinkedList"
@using DataStructuresVisualizer.DataStructures.DoublyLinkedListFile
@inject IJSRuntime JSRuntime

<h3>Doubly Linked List Operations</h3>

<div class="operation-selection">
    <select @bind="selectedAction">
        <option value="insertAtPosition">Insert At Position</option>
        <option value="prepend">Prepend</option>
        <option value="append">Append</option>
        <option value="search">Search</option>
        <option value="remove">Remove</option>
        <option value="create">Create</option>
        <option value="traverse">Traverse</option> <!-- Added traverse option -->
    </select>
    @switch (selectedAction)
    {
        case "insertAtPosition":
            <div class="insertion-fields">
                <label>Input Value:</label>
                <input type="number" @bind="inputValue" placeholder="Enter Value" />
                <label>Insert Position:</label>
                <input type="number" @bind="insertPosition" placeholder="Enter Position" />
                <button class="custom-button" @onclick="PerformInsertion" disabled="@isOperationInProgress">Insert</button>
            </div>
            break;
        case "prepend":
            <div class="insertion-fields">
                <label>Input Value:</label>
                <input type="number" @bind="inputValue" placeholder="Enter Value" />
                <button class="custom-button" @onclick="PrependValue" disabled="@isOperationInProgress">Prepend</button>
            </div>
            break;
        case "append":
            <div class="insertion-fields">
                <label>Input Value:</label>
                <input type="number" @bind="inputValue" placeholder="Enter Value" />
                <button class="custom-button" @onclick="AppendValue" disabled="@isOperationInProgress">Append</button>
            </div>
            break;
        case "search":
            <div class="insertion-fields">
                <label>Input Value:</label>
                <input type="number" @bind="inputValue" placeholder="Enter Value" />
                <button class="custom-button" @onclick="SearchValue" disabled="@isOperationInProgress">Search</button>
            </div>
            break;
        case "remove":
            <div class="insertion-fields">
                <label>Input Value:</label>
                <input type="number" @bind="inputValue" placeholder="Enter Value" />
                <button class="custom-button" @onclick="RemoveValue" disabled="@isOperationInProgress">Remove</button>
            </div>
            break;
        case "create":
            <div class="create-fields">
                <label>Input Value:</label>
                <input type="number" @bind="inputValue" placeholder="Enter Value" />
                <button class="custom-button" @onclick="CreateDoublyLinkedList" disabled="@isOperationInProgress">Create List</button>
            </div>
            break;
        case "traverse":
            <button class="custom-button" @onclick="TraverseList" disabled="@isOperationInProgress">Traverse</button>
            break;
        default:
            break;
    }
</div>

<div class="linked-list">
    @if (doublyLinkedList.Head != null)
    {
        <Node NodeValue="@doublyLinkedList.Head._data" />
        <div class="arrow-container">
            <LeftArrow CssClass="left-arrow" Highlight="@(doublyLinkedList.Head._data == highlightValue)" />
        </div>

        var currentNode = doublyLinkedList.Head.Next;
        while (currentNode != null)
        {
            if (currentNode.Prev != null)
            {
                <div class="arrow-container">
                    <RightArrow CssClass="right-arrow" Highlight="@(doublyLinkedList.Head._data == highlightValue)" />
                </div>
            }
            <Node NodeValue="currentNode._data" />
            if (currentNode.Next != null)
            {
                <div class="arrow-container">
                    <LeftArrow CssClass="left-arrow" Highlight="@(currentNode._data == highlightValue)" />
                </div>
            }
            currentNode = currentNode.Next;
        }
    }
</div>


@code {
    private string selectedAction = "create";
    private int inputValue;
    private int insertPosition;
    private bool isOperationInProgress = false;

    private DoublyLinkedList<int> doublyLinkedList = new DoublyLinkedList<int>();
    private int highlightValue = 2;

    private async Task PerformInsertion()
    {
        isOperationInProgress = true;
        try
        {
            await Task.Delay(500); // Simulate delay
            doublyLinkedList.InsertAt(inputValue, insertPosition);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task PrependValue()
    {
        isOperationInProgress = true;
        try
        {
            await Task.Delay(500); // Simulate delay
            doublyLinkedList.Prepend(inputValue);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task AppendValue()
    {
        isOperationInProgress = true;
        try
        {
            await Task.Delay(500); // Simulate delay
            doublyLinkedList.Append(inputValue);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task SearchValue()
    {
        isOperationInProgress = true;
        try
        {
            await Task.Delay(500); // Simulate delay
            // Implement search logic
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task RemoveValue()
    {
        isOperationInProgress = true;
        try
        {
            await Task.Delay(500); // Simulate delay
            doublyLinkedList.Delete(inputValue);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task CreateDoublyLinkedList()
    {
        isOperationInProgress = true;
        try
        {
            await Task.Delay(500); // Simulate delay
            for (int i = 0; i < inputValue; i++)
            {
                doublyLinkedList.Append(i + 1); // Simulate appending nodes
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }

    private async Task TraverseList()
    {
        isOperationInProgress = true;
        try
        {
            var currentNode = doublyLinkedList.Head;
            while (currentNode != null)
            {
                highlightValue = currentNode._data; // Highlight current node
                StateHasChanged(); // Update UI
                await Task.Delay(1000); // Wait for 1 second
                currentNode = currentNode.Next;
            }
            highlightValue = -1; // Clear highlight
            StateHasChanged(); // Update UI
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
            isOperationInProgress = false;
        }
    }
}
