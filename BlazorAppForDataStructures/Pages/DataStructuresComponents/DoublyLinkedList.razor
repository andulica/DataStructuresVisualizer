@page "/doublyLinkedList"
@inject IJSRuntime JSRuntime
@using DataStructuresVisualizer.DataStructures;
@using DataStructuresVisualizer.DataStructures.DoublyLinkedListFile
@using DataStructuresVisualizer.DataStructures.Enums.DoublyLinkedList

<head>
    <link rel="stylesheet" href="/css/styles.css" />
</head>

<div id="linked-list" class="container">

    <h3>Doubly Linked List Operations</h3>

    <div class="operation-selection">
        <select @onchange="OnActionChanged">
            <option value="" disabled selected>Select an Operation</option> <!-- Initial message -->
            <option value="insertAtPosition">Insert At Position</option>
            <option value="prepend">Prepend</option>
            <option value="append">Append</option>
            <option value="search">Search</option>
            <option value="remove">Remove</option>
            <option value="create">Create</option>
        </select>
        @switch (selectedAction)
        {
            case "insertAtPosition":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <label>Insert Position:</label>
                    <input type="number" @bind="insertPosition" placeholder="Enter Position" />
                    <button class="custom-button" @onclick="PerformInsertion">Insert</button>
                </div>
                break;
            case "prepend":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="PrependValue">Prepend</button>
                </div>
                break;
            case "append":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="AppendValue">Append</button>
                </div>
                break;
            case "search":
                <div class="insertion-fields">
                    <label>Input Value:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="SearchValue">Search</button>
                </div>
                break;
            case "remove":
                <div class="insertion-fields">
                    <label>Input Index:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Index" />
                    <button class="custom-button" @onclick="RemoveValue">Remove</button>
                </div>
                break;
            case "create":
                <div class="create-fields">
                    <label>Number of Nodes:</label>
                    <input type="number" @bind="inputValue" placeholder="Enter Value" />
                    <button class="custom-button" @onclick="CreateDoublyLinkedList">Create List</button>
                </div>
                break;
            default:
                break;
        }

        @if (!string.IsNullOrEmpty(messageOutput))
        {
            <div class="notification-container">
                <span class="notification-message">@messageOutput</span>
                <button class="notification-close" @onclick="ClearMessage">✖</button>
            </div>
        }
    </div>

    <div id="dll-display"></div>

    <CodeDisplay CodeLines="@currentCode" />
</div>

@code {
    private CodeDisplay? CodeDisplay;
    private string _selectedAction = "";
    private int inputValue;
    private int insertPosition;
    private Random rand = new Random();
    private string messageOutput = "";
    private IEnumerable<string> currentCode = Enumerable.Empty<string>();
    VisualizationTiming timing = VisualizationTiming.Default;
    private DoublyLinkedList<int> doublyLinkedList = new DoublyLinkedList<int>();
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();


    public string selectedAction
    {
        get => _selectedAction;
        set
        {
            if (_selectedAction != value)
            {
                _selectedAction = value;
                currentCode = GetCodeByOperation(value);
                StateHasChanged();
            }
        }
    }

    private void InitializeNewOperation()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
    }

    private void OnActionChanged(ChangeEventArgs e)
    {
        selectedAction = e.Value.ToString();
        InitializeNewOperation(); // Cancel the ongoing operation when a new action is selected
    }

    protected override void OnInitialized()
    {
        doublyLinkedList.AppendInstant(rand.Next(1, 30));
        doublyLinkedList.AppendInstant(rand.Next(1, 30));
        doublyLinkedList.AppendInstant(rand.Next(1, 30));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dllData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", dllData);
        }
    }

    private IEnumerable<string> GetCodeByOperation(string operation)
    {
        Dictionary<string, IEnumerable<string>> codeSnippets = new Dictionary<string, IEnumerable<string>>
            {
                ["search"] = new List<string>
                {
                    "if empty, return NOT_FOUND",
                    "index = 0, tmp = head",
                    "while (tmp.item != v)",
                    "index++, tmp = tmp.next",
                    "if tmp == null,",
                    "    return NOT_FOUND",
                    "return index"
                },
                ["prepend"] = new List<string>
                {
                    "Vertex vtx = new Vertex(v)",
                    "if (head != null) head.prev = vtx",
                    "vtx.next = head",
                    "head = vtx"
                },
                ["append"] = new List<string>
                {
                    "Vertex vtx = new Vertex(v)",
                    "tail.next = vtx",
                    "vtx.prev = tail",
                    "tail = vtx"
                },
                ["insertAtPosition"] = new List<string>
                {
                    "Vertex pre = head",
                    "for (k = 0; k<i-1; k++)",
                    "  pre = pre.next",
                    "Vertex aft = pre.next",
                    "Vertex vtx = new Vertex(v)",
                    "vtx.next = aft, aft.prev = vtx",
                    "pre.next = vtx, vtx.prev = pre"
                },
                ["remove"] = new List<string>
                {
                    "if empty, do nothing",
                    "Vertex pre = head",
                    "for (k = 0; k<i-1; k++)",
                    "  pre = pre.next",
                    "Vertex del = pre.next, after = del.next",
                    "pre.next = aft, aft.prev = pre",
                    "delete del"
                }
            };

        if (codeSnippets.TryGetValue(operation, out var code))
        {
            return code;
        }
        return new List<string> { "Select an operation to view the code." };
    }

    private async Task PerformInsertion()
    {
        InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (doublyLinkedList.IsFull())
        {
            messageOutput = $"The list has reached its maximum capacity of {doublyLinkedList.maxCapacity} nodes. Cannot insert a new node.";
            return;
        }

        if (doublyLinkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        if (insertPosition <= 0 || insertPosition > doublyLinkedList.Count - 1)
        {
            messageOutput = $"The position to insert must be greater than 0 and no bigger than {doublyLinkedList.Count - 1}";
            return;
        }

        var nodeToInsert = new DoublyLinkedListNode<int>(inputValue);
        var dllData = ConvertNodeToJavaScriptFormat(nodeToInsert);

        try
        {
            doublyLinkedList.HighlightRequested += HandleHighlightRequest; // Subscribe to highlight events

            var insertTask = doublyLinkedList.InsertAtAsync(nodeToInsert, insertPosition, _cancellationTokenSource.Token);
            var jsTask = JSRuntime.InvokeVoidAsync("insertAtInDll", dllData, insertPosition, timing.JavaScriptDelay).AsTask();

            await Task.WhenAll(insertTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("DllCancelVisuals");
            doublyLinkedList.InsertAtInstant(nodeToInsert, insertPosition);

            var doublyLinkedListData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", doublyLinkedListData);

            messageOutput = $"Visual cancelled. Value {inputValue} inserted at index {insertPosition}.";
        }
        finally
        {
            doublyLinkedList.HighlightRequested -= HandleHighlightRequest; // Unsubscribe from highlight events
            JSRuntime.InvokeVoidAsync("resetCodeLineHighlight");
        }
    }

    private async Task PrependValue()
    {
        InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (doublyLinkedList.IsFull())
        {
            messageOutput = $"The list has reached its maximum capacity of {doublyLinkedList.maxCapacity} nodes. Cannot insert a new node.";
            return;
        }

        if (doublyLinkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        var nodeToInsert = new DoublyLinkedListNode<int>(inputValue);
        var dllData = ConvertNodeToJavaScriptFormat(nodeToInsert);

        try
        {
            doublyLinkedList.HighlightRequested += HandleHighlightRequest; // Subscribe to highlight events

            var insertTask = doublyLinkedList.PrependAsync(nodeToInsert, _cancellationTokenSource.Token);
            var jsTask = JSRuntime.InvokeVoidAsync("insertHeadInDll", dllData, timing.JavaScriptDelay).AsTask();

            await Task.WhenAll(insertTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("DllCancelVisuals");
            doublyLinkedList.PrependInstant(inputValue);

            var doublyLinkedListData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", doublyLinkedListData);

            messageOutput = $"Visual cancelled. Value {inputValue} prepended.";
        }
        finally
        {
            JSRuntime.InvokeVoidAsync("resetCodeLineHighlight");
            doublyLinkedList.HighlightRequested -= HandleHighlightRequest; // Unsubscribe from highlight events
        }
    }

    private async Task AppendValue()
    {

        InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (doublyLinkedList.IsFull())
        {
            messageOutput = $"The list has reached its maximum capacity of {doublyLinkedList.maxCapacity} nodes. Cannot insert a new node.";
            return;
        }

        if (doublyLinkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        var nodeToInsert = new DoublyLinkedListNode<int>(inputValue);
        var dllData = ConvertNodeToJavaScriptFormat(nodeToInsert);

        try
        {
            doublyLinkedList.HighlightRequested += HandleHighlightRequest; // Subscribe to highlight events

            var appendTask = doublyLinkedList.AppendAsync(nodeToInsert, _cancellationTokenSource.Token);
            var jsTask = JSRuntime.InvokeVoidAsync("insertTailInDll", dllData, timing.JavaScriptDelay).AsTask();

            await Task.WhenAll(appendTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("DllCancelVisuals");
            doublyLinkedList.AppendInstant(inputValue);

            var doublyLinkedListData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", doublyLinkedListData);

            messageOutput = $"Visual cancelled. Value {inputValue} appended.";
        }
        finally
        {
            JSRuntime.InvokeVoidAsync("resetCodeLineHighlight");
            doublyLinkedList.HighlightRequested -= HandleHighlightRequest; // Unsubscribe from highlight events
        }
    }

    private async Task SearchValue()
    {
        InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (doublyLinkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        try
        {
            doublyLinkedList.HighlightRequested += HandleHighlightRequest; // Subscribe to highlight events

            var searchTask = doublyLinkedList.SearchAsync(inputValue, _cancellationTokenSource.Token);
            var jsTask = JSRuntime.InvokeVoidAsync("searchValueInDLL", inputValue, timing.JavaScriptDelay).AsTask();

            await Task.WhenAll(searchTask, jsTask); // Run both tasks concurrently
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("DllCancelVisuals");
            var doublyLinkedListData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", doublyLinkedListData);
            messageOutput = "Visual cancelled.";
        }
        finally
        {
            JSRuntime.InvokeVoidAsync("resetCodeLineHighlight");
            doublyLinkedList.HighlightRequested -= HandleHighlightRequest; // Unsubscribe from highlight events
        }
    }

    private async Task RemoveValue()
    {
        InitializeNewOperation(); // Ensure ongoing operation is cancelled before starting a new one

        if (doublyLinkedList.Count == 0)
        {
            CreateNewList();
            return;
        }

        if (doublyLinkedList.Count() == 0 || inputValue >= doublyLinkedList.Count)
        {
            messageOutput = $"The index {inputValue} you are trying to delete does not exist. Please enter a smaller value.";
            return;
        }

        var nodeToRemove = doublyLinkedList.FindNodeByIndex(inputValue);
        var nodeToBeDeleted = ConvertNodeToJavaScriptFormat(nodeToRemove);

        try
        {
            doublyLinkedList.HighlightRequested += HandleHighlightRequest; // Subscribe to highlight events

            var deleteTask = doublyLinkedList.DeleteAtAsync(inputValue, _cancellationTokenSource.Token);
            var jsTask = JSRuntime.InvokeVoidAsync("removeValueInDll", nodeToBeDeleted, timing.JavaScriptDelay).AsTask();

            await Task.WhenAll(deleteTask, jsTask); // Run both tasks concurrently for managing both JS visual and C# code highlighting
        }
        catch (OperationCanceledException)
        {
            await JSRuntime.InvokeVoidAsync("DllCancelVisuals");

            if (doublyLinkedList.Count() != 0 || doublyLinkedList.Contains(nodeToRemove))
            {
                doublyLinkedList.DeleteAtInstant(nodeToRemove);
            }

            var doublyLinkedListData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", doublyLinkedListData);

            messageOutput = $"Visual cancelled. Value at index {inputValue} deleted.";
        }
        finally
        {
            JSRuntime.InvokeVoidAsync("resetCodeLineHighlight");
            doublyLinkedList.HighlightRequested -= HandleHighlightRequest; // Unsubscribe from highlight events
        }
    }

    private async void CreateNewList()
    {
        messageOutput = $"The list is empty. New list has been created.";
        await CreateDoublyLinkedList();
        var doublyLinkedListData = ConvertListToJavaScriptFormat(this.doublyLinkedList);
        await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", doublyLinkedListData);
    }


    private async Task CreateDoublyLinkedList()
    {
        if (inputValue > doublyLinkedList.maxCapacity)
        {
            messageOutput = $"The doubly linked list can have a maximum number of {doublyLinkedList.maxCapacity} nodes. Please enter a smaller value.";
            return;
        }

        if (doublyLinkedList.Count == 0)
        {
            doublyLinkedList.AppendInstant(rand.Next(1, 30));
            doublyLinkedList.AppendInstant(rand.Next(1, 30));
            doublyLinkedList.AppendInstant(rand.Next(1, 30));
            return;
        }

        try
        {
            doublyLinkedList = new DoublyLinkedList<int>();

            for (int i = 0; i < inputValue; i++)
            {
                doublyLinkedList.AppendInstant(rand.Next(1, 30));
            }

            var dllData = ConvertListToJavaScriptFormat(doublyLinkedList);
            await JSRuntime.InvokeVoidAsync("drawDoublyLinkedList", dllData);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
        finally
        {
        }
    }

    private async Task HandleHighlightRequest(Enum step)
    {
        await JSRuntime.InvokeVoidAsync("highlightLine", step);
        await Task.Delay(timing.HighlightDelay);
    }

    private object ConvertNodeToJavaScriptFormat(DoublyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            prev = node.Prev != null ? node.Prev.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertListToJavaScriptFormat(DoublyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                prev = currentNode.Prev != null ? currentNode.Prev.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

    private void ClearMessage()
    {
        messageOutput = "";
    }
}
