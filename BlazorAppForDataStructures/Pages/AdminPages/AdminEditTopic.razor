@page "/admin/topics/{TopicName}/questions"
@inject HttpClient Http
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject SecureStorageService SecureStorage
@using BlazorAppForDataStructures.Models
@using BlazorAppForDataStructures.Services
@using System.Text.Json

<h3>Edit Topic</h3>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (topic == null)
{
    <p class="text-danger">Topic not found or an error occurred.</p>
}
else
{
    <div>
        <h4>@topic.Name</h4>

        <EditForm Model="@topic" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <h5>Questions</h5>
            @foreach (var question in topic.Questions)
            {
                <div class="mb-4">
                    <label for="questionText">Question Text</label>
                    <InputText id="questionText" class="form-control" @bind-Value="question.QuestionText" />
                    <ValidationMessage For="@(() => question.QuestionText)" />

                    <h6>Answers</h6>
                    @foreach (var answer in question.Answers)
                    {
                        <div class="d-flex align-items-center mb-2">
                            <InputText class="form-control me-2" @bind-Value="answer.AnswerText" placeholder="Answer Text" />
                            <ValidationMessage For="@(() => answer.AnswerText)" />

                            <input type="radio" name="@($"correctAnswer_{question.QuestionId}")"
                                    @onclick="() => SetCorrectAnswer(question, answer)" /> Correct



                            <!-- Add `type="button"` here -->
                            <button type="button" class="btn btn-danger ms-2" @onclick="() => RemoveAnswer(question, answer)">Remove</button>
                        </div>
                    }

                    <!-- Add `type="button"` here -->
                    <button type="button" class="btn btn-secondary mb-3" @onclick="() => AddAnswer(question)">Add Answer</button>
                </div>

                <!-- Add `type="button"` here -->
                <button type="button" class="btn btn-danger mb-3" @onclick="() => RemoveQuestion(question)">Remove Question</button>
            }

            <!-- Add `type="button"` here -->
            <button type="button" class="btn btn-secondary" @onclick="AddQuestion">Add Question</button>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
}


<div class="alert alert-info" role="alert" style="display: @(isVisible ? "block" : "none")">
    @message
</div>

@code {
    [Parameter] public string TopicName { get; set; }
    private Topic? topic;
    private bool isLoading = true;
    private string? message;
    private bool isVisible = false;

    protected override async Task OnInitializedAsync()
    {
        NotificationService.OnMessageAdded += ShowMessage;
        NotificationService.OnMessageCleared += ClearMessage;
        await LoadTopicAsync();
    }

    private async void ShowMessage(string newMessage)
    {
        message = newMessage;
        isVisible = true;
        StateHasChanged();

        // Hide after 5 seconds
        await Task.Delay(5000);
        ClearMessage();
    }

    private void ClearMessage()
    {
        message = null;
        isVisible = false;
        StateHasChanged();
    }

    private void SetCorrectAnswer(Question question, Answer selectedAnswer)
    {
        foreach (var answer in question.Answers)
        {
            answer.IsCorrect = false; // Deselect all answers
        }

        selectedAnswer.IsCorrect = true; // Set the selected answer as correct
    }

    public void Dispose()
    {
        NotificationService.OnMessageAdded -= ShowMessage;
        NotificationService.OnMessageCleared -= ClearMessage;
    }

    private async Task LoadTopicAsync()
    {
        isLoading = true;

        try
        {
            var token = await SecureStorage.GetAsync("authToken");
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/topics/{TopicName}/questions");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var questions = await response.Content.ReadFromJsonAsync<List<Question>>(new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (questions != null)
                {
                    topic = new Topic
                        {
                            Name = TopicName,
                            Questions = questions
                        };
                }
            }
            else
            {
                NotificationService.AddMessage($"Failed to load topic: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.AddMessage($"An error occurred: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            // Validation: Ensure each question has one correct answer
            foreach (var question in topic?.Questions ?? new List<Question>())
            {
                if (!question.Answers.Any(a => a.IsCorrect))
                {
                    NotificationService.AddMessage($"Question '{question.QuestionText}' must have at least one correct answer.");
                    return;
                }
            }

            var token = await SecureStorage.GetAsync("authToken");
            var request = new HttpRequestMessage(HttpMethod.Put, $"api/topics/{TopicName}")
                {
                    Content = JsonContent.Create(topic)
                };
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                NotificationService.AddMessage("Topic updated successfully.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                NotificationService.AddMessage($"Failed to update topic: {error}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.AddMessage($"An error occurred: {ex.Message}");
        }
    }

    private void AddQuestion()
    {
        topic?.Questions.Add(new Question { Answers = new List<Answer>() });
    }

    private void RemoveQuestion(Question question)
    {
        topic?.Questions.Remove(question);
    }

    private void AddAnswer(Question question)
    {
        question.Answers.Add(new Answer());
    }

    private void RemoveAnswer(Question question, Answer answer)
    {
        question.Answers.Remove(answer);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/topics");
    }
}
