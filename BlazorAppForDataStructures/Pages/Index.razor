@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject QuizService QuizService

<AuthorizeView>
    <Authorized>
        @if (showWelcomeMessage)
        {
            <div class="alert alert-info welcome-alert" role="alert">
                Welcome back, @context.User.Identity.Name!
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <!-- Not logged in -->
    </NotAuthorized>
</AuthorizeView>

<div class="page-container">
</div>

<h1 class="page-title">Select a Data Structure to Visualize</h1>

<div class="button-container">
    @foreach (var ds in dataStructures)
    {
        <div class="data-structure-wrapper">
            <button class="data-structure-button" @onclick="() => NavigateToVisualizer(ds)">
                @ds
            </button>
            @if (ds == "SinglyLinkedList")
            {
                <img src="/images/sll_visual.gif" alt="Singly Linked List Visualization" class="img-thumbnail" />
            }
            @if (ds == "BinarySearchTree")
            {
                <img src="/images/bst_visual.gif" alt="Binary Search Tree Visualization" class="img-thumbnail" />
            }
            @if (ds == "DoublyLinkedList")
            {
                <img src="/images/dll_visual.gif" alt="Doubly Linked List Visualisation" class="img-thumbnail" />
            }
            @if (ds == "Queue")
            {
                <img src="/images/queue_visual.gif" alt="Queue Visualization" class="img-thumbnail" />
            }
            @if (ds == "Stack")
            {
                <img src="/images/stack_visual.gif" alt="Stack Visualization" class="img-thumbnail" />
            }
        </div>
    }

    <h1 class="page-title">Select a data structure quiz to test your knowledge</h1>
    <h5>Please be advised that at the end of the quiz, you can receive tailored feedback based on your answers and ask our AI bot for any clarifications related to the topic.</h5>

    @if (IsLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading quiz, please wait...</p>
        </div>
    }
    else
    {
        <div class="button-container">
            @foreach (var dsQuiz in dataStructuresQuizzes)
            {
                <div class="data-structure-wrapper">
                    <button class="data-structure-button" @onclick="() => NavigateToQuiz(dsQuiz)">
                        @dsQuiz
                    </button>
                </div>
            }
        </div>
    }
</div>

<style>
    .welcome-alert {
        max-width: 400px;
        margin: 20px auto; /* Center horizontally */
        text-align: center;
    }

    .page-container {
        background-image: url('/images/home_page_img_bckg.png');
        display: block;
        margin-left: auto;
        margin-right: auto;
        height: 100px;
        width: 50%;
        padding: 70px 0;
    }

    body {
        font-family: 'Roboto', Arial, sans-serif;
        background-color: #fff;
        color: #333;
        margin: 0;
        padding: 20px;
        text-align: center;
    }

    .page-title {
        color: #FFA500;
        margin-bottom: 20px;
    }

    .button-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
    }

    .data-structure-wrapper {
        text-align: center;
        margin-bottom: 20px;
        width: 200px;
    }

    .data-structure-button {
        background-color: skyblue;
        border: none;
        color: #004D40;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
        width: 100%;
    }

        .data-structure-button:hover {
            background-color: deepskyblue;
            transform: scale(1.1);
        }

</style>

@code {
    private string[] dataStructures = { "SinglyLinkedList", "DoublyLinkedList", "BinarySearchTree", "Queue", "Stack" };
    private bool showWelcomeMessage = false;

    protected override void OnInitialized()
    {
        showWelcomeMessage = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && showWelcomeMessage)
        {
            await Task.Delay(5000);
            showWelcomeMessage = false;
            StateHasChanged();
        }
    }

    private void NavigateToVisualizer(string dataStructure)
    {
        NavigationManager.NavigateTo($"/visualize/{dataStructure}");
    }

    private string[] dataStructuresQuizzes =
        { "SinglyLinkedListQuiz", "DoublyLinkedListQuiz", "BinarySearchTreeQuiz", "QueueQuiz", "StackQuiz" };

    private bool IsLoading;


    private async Task NavigateToQuiz(string dataStructureQuiz)
    {
        IsLoading = true;
        StateHasChanged();

        var questions = await QuizService.GetQuestionsAsync(dataStructureQuiz);

        NavigationManager.NavigateTo(dataStructureQuiz);
    }
}