@page "/"
@inject IJSRuntime JSRuntime
@using DataStructuresVisualizer.DataStructures.SinglyLinkedListFile;
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>

<div class="page-container">
    <div class="card">
        <p>Click the button below to start exploring various data structures and their operations.</p>
        <button class="btn-explorer" @onclick="NavigateToPage">Explore Data Structures</button>
    </div>

    <svg id="sll-display" class="background-svg" width="800" height="150">
        <defs>
            <marker id="right-arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                <polygon points="0 0, 10 3.5, 0 7" fill="black" />
            </marker>
            <marker id="left-arrowhead" markerWidth="5" markerHeight="3.5" refX="0" refY="1.75" orient="auto">
                <polygon points="0 0, 5 1.75, 0 3.5" fill="black" />
            </marker>
        </defs>
    </svg>
</div>


<style>
    .page-container {
        text-align: center;
        padding: 20px;
        color: black;
        background-image: url('/images/home_page_img_bckg.png');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: -110px -150px;
        height: 100vh;
    }

    .btn-explorer {
        background-color: skyblue;
        color: black;
        border: 2px solid black;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }

        .btn-explorer:hover {
            background-color: deepskyblue;
        }

    .background-svg {
        display: block; /* Ensure the SVG is displayed */
        z-index: 1; /* Ensure SVG appears above other elements */
        position: relative; /* Ensure it’s positioned correctly */
    }

    .page-title {
        color: black;
    }

    .card {
        background-color: orange;
        border: 2px solid black;
        padding: 15px;
        border-radius: 20px;
        display: inline-block;
    }

    svg {
        display: block;
        margin: 0 auto;
    }

    .highlight {
        fill: orange !important;
    }

    .found {
        fill: green !important;
    }
</style>

@code {
    private SinglyLinkedList<int> linkedList = new SinglyLinkedList<int>();
    private Random rand = new Random();

    protected override void OnInitialized()
    {
        linkedList.Add(rand.Next(1, 30));
        linkedList.Add(rand.Next(1, 30));
        linkedList.Add(rand.Next(1, 30));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Convert the linked list to a format suitable for JavaScript
            var linkedListData = ConvertListToJavaScriptFormat(linkedList);
            await JSRuntime.InvokeVoidAsync("drawLinkedList", linkedListData);

            // Start the insertion loop
            for (int i = 0; i < 3; i++)
            {
                int position = i % (linkedList.Count + 1);

                var newNode = new SinglyLinkedListNode<int>(rand.Next(1, 30));
                var jsNode = ConvertNodeToJavaScriptFormat(newNode);
                await JSRuntime.InvokeVoidAsync("insertAtInSLL", jsNode, position, 1000);
                await Task.Delay(6500);
            }
        }
    }

    private object ConvertNodeToJavaScriptFormat(SinglyLinkedListNode<int> node)
    {
        return new
        {
            value = node._data,
            next = node.Next != null ? node.Next.Id : (Guid?)null,
            id = node.Id
        };
    }

    private List<object> ConvertListToJavaScriptFormat(SinglyLinkedList<int> list)
    {
        var nodes = new List<object>();
        var currentNode = list.Head;
        while (currentNode != null)
        {
            nodes.Add(new
            {
                value = currentNode._data,
                next = currentNode.Next != null ? currentNode.Next.Id : (Guid?)null,
                id = currentNode.Id
            });
            currentNode = currentNode.Next;
        }
        return nodes;
    }

    private void NavigateToPage()
    {
        NavigationManager.NavigateTo("/dataStructure");
    }
}
