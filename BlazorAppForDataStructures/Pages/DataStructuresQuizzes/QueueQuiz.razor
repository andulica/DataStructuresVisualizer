@page "/QueueQuiz"
@using BlazorAppForDataStructures.Models
@inject QuizService QuizService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using System.Net.Http.Json

<h3>Queue Quiz</h3>

<div class="blueprint-bg">
    <div class="quiz-container">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (currentQuestion != null)
        {
            <div>
                <p><strong>Question @currentIndex:</strong> @currentQuestion.QuestionText</p>

                @foreach (var answer in currentQuestion.Answers)
                {
                    <div>
                        <input type="radio" id="@answer.AnswerId" name="answer"
                               value="@answer.AnswerId" @onchange="OnAnswerSelected" />
                        <label for="@answer.AnswerId">@answer.AnswerText</label>
                    </div>
                }

                <button @onclick="NextQuestion">Next</button>
            </div>
        }
        else if (quizCompleted)
        {
            <div>
                <h4>Quiz Completed!</h4>
                <p>Your Score: @score / @totalQuestions</p>
                <button @onclick="RestartQuiz">Retry Quiz</button>
            </div>
        }
        else
        {
            <p>Loading...</p>
        }

        <div style="margin-top: 20px;">
            <p>Question @((currentIndex)) of @questions.Count</p>
        </div>

        @if (quizCompleted)
        {
            <QuizFeedback QuizData="quizData"
                          UserAnswers="userAnswers"
                          IsChatbotDisabled="false" />
        }
    </div>
</div>

@code {
    private Question? currentQuestion;
    private int currentIndex = 1;
    private int selectedAnswerId = -1;
    private int score = 0;
    private int totalQuestions = 0;
    private bool quizCompleted = false;
    private List<Question> questions = new List<Question>();
    private bool isLoading = false;

    // For Chatbot
    private QuizDto quizData;
    private Dictionary<int, int> userAnswers = new();
    private bool IsChatbotDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuizData();
        quizData = ConvertToQuizDto(questions, "Queue");
    }

    private async Task LoadQuizData()
    {
        isLoading = true;
        StateHasChanged(); // show spinner

        questions = await QuizService.GetQuestionsAsync("Queue");
        if (questions != null && questions.Any())
        {
            currentQuestion = questions[0];
            totalQuestions = questions.Count;
        }

        isLoading = false;
        StateHasChanged(); // hide spinner
    }

    private void OnAnswerSelected(ChangeEventArgs e)
    {
        selectedAnswerId = int.Parse(e.Value?.ToString() ?? "-1");
    }

    private void NextQuestion()
    {
        if (selectedAnswerId != -1 && currentQuestion != null)
        {
            // Record user answer
            userAnswers[currentQuestion.QuestionId] = selectedAnswerId;

            // Check correctness
            bool isCorrect = currentQuestion.Answers
                .Any(a => a.AnswerId == selectedAnswerId && a.IsCorrect);
            if (isCorrect) score++;

            currentIndex++;
            if (currentIndex <= totalQuestions)
            {
                currentQuestion = questions[currentIndex - 1];
            }
            else
            {
                currentIndex = totalQuestions;
                quizCompleted = true;
                currentQuestion = null;
            }

            selectedAnswerId = -1;
        }
    }

    private async Task RestartQuiz()
    {
        currentIndex = 1;
        score = 0;
        quizCompleted = false;

        await LoadQuizData();
    }

    private QuizDto ConvertToQuizDto(List<Question> questions, string topicName)
    {
        var quizDto = new QuizDto
            {
                TopicId = 0,
                Name = topicName,
                Questions = questions.Select(q => new QuestionDto
                {
                    QuestionId = q.QuestionId,
                    TopicId = q.TopicId,
                    QuestionText = q.QuestionText,
                    Answers = q.Answers.Select(a => new AnswerDto
                    {
                        AnswerId = a.AnswerId,
                        QuestionId = a.QuestionId,
                        AnswerText = a.AnswerText,
                        IsCorrect = a.IsCorrect
                    }).ToList()
                }).ToList()
            };
        return quizDto;
    }
}