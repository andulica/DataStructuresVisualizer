@page "/admin/login"
@using BlazorAppForDataStructures.Models
@using BlazorAppForDataStructures.Services

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SecureStorageService SecureStorage


<h3>Admin Login</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div>
    <form @onsubmit="HandleLogin">
        <div class="mb-3">
            <label for="username" class="form-label">Username/Email</label>
            <input type="text" id="username" class="form-control" @bind="loginModel.Email" required />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" id="password" class="form-control" @bind="loginModel.Password" required />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;


    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (tokenResponse != null)
                {
                    await SecureStorage.SetAsync("authToken", tokenResponse.Token);

                    // Add the token to HttpClient headers as the JSInterop call to SecureStorage in Program.cs won't work due to the lack of a browser context
                    Http.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", tokenResponse.Token);

                    NavigationManager.NavigateTo("/admin/dashboard");
                }
            }
            else
            {
                errorMessage = "Invalid login credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    }