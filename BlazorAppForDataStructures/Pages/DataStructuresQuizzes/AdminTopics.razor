@page "/admin/topics"
@inject HttpClient Http
@inject NotificationService NotificationService
@inject SecureStorageService SecureStorage
@using BlazorAppForDataStructures.Models
@using BlazorAppForDataStructures.Services


<h3>Manage Topics</h3>

<!-- Button to open modal -->
<button class="btn btn-primary" @onclick="ShowAddTopicModal">Add New Topic</button>

<!-- List of topics -->
@if (topics == null)
{
    <p>Loading topics...</p>
}
else
{
    <ul>
        @foreach (var topic in topics)
        {
            <li>@topic.Name</li>
        }
    </ul>
}

<!-- Modal for adding new topic -->
@if (isAddTopicModalVisible)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Topic</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddTopicModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="topicName">Topic Name</label>
                        <input type="text" id="topicName" class="form-control" @bind="newTopic.Name" required />
                    </div>

                    <h5>Questions</h5>
                    @foreach (var question in newTopic.Questions)
                    {
                        <div class="mb-3">
                            <label for="questionText">Question Text</label>
                            <input type="text" id="questionText" class="form-control" @bind="question.QuestionText" required />

                            <h6>Answers</h6>
                            @foreach (var answer in question.Answers)
                            {
                                <div class="d-flex mb-2">
                                    <input type="text" class="form-control me-2" @bind="answer.AnswerText" placeholder="Answer Text" />
                                    <input type="checkbox" @bind="answer.IsCorrect" /> Correct
                                    <button class="btn btn-danger ms-2" @onclick="() => RemoveAnswer(question, answer)">Remove</button>
                                </div>
                            }
                            <button class="btn btn-secondary mb-3" @onclick="() => AddAnswer(question)">Add Answer</button>
                        </div>
                        <button class="btn btn-danger mb-3" @onclick="() => RemoveQuestion(question)">Remove Question</button>
                    }
                    <button class="btn btn-secondary" @onclick="AddQuestion">Add Question</button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddTopicModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTopic">Add Topic</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Topic>? topics;
    private bool isAddTopicModalVisible = false;
    private Topic newTopic = new Topic
        {
            Questions = new List<Question>()
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadTopics();
    }

    private async Task LoadTopics()
    {
        try
        {
            topics = await Http.GetFromJsonAsync<List<Topic>>("api/Topics");
        }
        catch (Exception ex)
        {
            NotificationService.AddMessage($"Failed to load topics: {ex.Message}");
        }
    }

    private void ShowAddTopicModal()
    {
        newTopic = new Topic
            {
                Questions = new List<Question>()
            };
        isAddTopicModalVisible = true;
    }

    private void CloseAddTopicModal()
    {
        isAddTopicModalVisible = false;
    }

    private void AddQuestion()
    {
        newTopic.Questions.Add(new Question
            {
                Answers = new List<Answer>()
            });
    }

    private void RemoveQuestion(Question question)
    {
        newTopic.Questions.Remove(question);
    }

    private void AddAnswer(Question question)
    {
        question.Answers.Add(new Answer());
    }

    private void RemoveAnswer(Question question, Answer answer)
    {
        question.Answers.Remove(answer);
    }

    private async Task AddTopic()
    {
        if (string.IsNullOrWhiteSpace(newTopic.Name))
        {
            NotificationService.AddMessage("Topic name cannot be empty.");
            return;
        }

        try
        {
            var token = await SecureStorage.GetAsync("authToken");

            var request = new HttpRequestMessage(HttpMethod.Post, "api/Topics")
                {
                    Content = JsonContent.Create(newTopic)
                };

            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                NotificationService.AddMessage("Topic added successfully.");
                await LoadTopics();
                CloseAddTopicModal();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                NotificationService.AddMessage($"Failed to add topic: {error}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.AddMessage($"An error occurred: {ex.Message}");
        }
    }
}
