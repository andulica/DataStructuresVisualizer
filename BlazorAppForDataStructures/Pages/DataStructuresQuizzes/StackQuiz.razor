@page "/StackQuiz"
@using BlazorAppForDataStructures.Models
@inject QuizService QuizService
@inject NavigationManager NavigationManager

<h3>Stack Quiz</h3>

<div>
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (currentQuestion != null)
    {
        <div>
            <p><strong>Question @currentIndex:</strong> @currentQuestion.QuestionText</p>

            @foreach (var answer in currentQuestion.Answers)
            {
                <div>
                    <input type="radio" id="@answer.AnswerId" name="answer"
                           value="@answer.AnswerId" @onchange="OnAnswerSelected" />
                    <label for="@answer.AnswerId">@answer.AnswerText</label>
                </div>
            }

            <button @onclick="NextQuestion">Next</button>
        </div>
    }
    else if (quizCompleted)
    {
        <div>
            <h4>Quiz Completed!</h4>
            <p>Your Score: @score / @totalQuestions</p>
            <button @onclick="RestartQuiz">Retry Quiz</button>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }

    <div style="margin-top: 20px;">
        <p>Question @((currentIndex)) of @questions.Count</p>
    </div>
</div>

@code {
    private Question? currentQuestion;
    private int currentIndex = 1;
    private int selectedAnswerId = -1;
    private int score = 0;
    private int totalQuestions = 0;
    private bool quizCompleted = false;
    private List<Question> questions = new List<Question>();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuizData();
    }

    private async Task LoadQuizData()
    {
        isLoading = true;
        StateHasChanged(); // show spinner

        questions = await QuizService.GetQuestionsAsync("Stack");
        if (questions != null && questions.Any())
        {
            currentQuestion = questions[0];
            totalQuestions = questions.Count;
        }

        isLoading = false;
        StateHasChanged(); // hide spinner
    }

    private void OnAnswerSelected(ChangeEventArgs e)
    {
        selectedAnswerId = int.Parse(e.Value?.ToString() ?? "-1");
    }

    private void NextQuestion()
    {
        if (selectedAnswerId != -1 && currentQuestion != null)
        {
            // Check if the selected answer is correct
            var isCorrect = currentQuestion.Answers
                .Any(a => a.AnswerId == selectedAnswerId && a.IsCorrect);

            if (isCorrect)
                score++;

            currentIndex++;
            if (currentIndex <= totalQuestions)
            {
                currentQuestion = questions[currentIndex - 1];
            }
            else
            {
                currentIndex = totalQuestions;
                quizCompleted = true;
                currentQuestion = null;
            }

            selectedAnswerId = -1;
        }
    }

    private async Task RestartQuiz()
    {
        currentIndex = 1;
        score = 0;
        quizCompleted = false;

        await LoadQuizData();
    }
}